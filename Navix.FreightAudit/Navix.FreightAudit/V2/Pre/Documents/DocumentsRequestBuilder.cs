// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Navix.FreightAudit.Models;
using Navix.FreightAudit.V2.Pre.Documents.Textlocate;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Navix.FreightAudit.V2.Pre.Documents
{
    /// <summary>
    /// Builds and executes requests for operations under \v2\pre\documents
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class DocumentsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The textlocate property</summary>
        public global::Navix.FreightAudit.V2.Pre.Documents.Textlocate.TextlocateRequestBuilder Textlocate
        {
            get => new global::Navix.FreightAudit.V2.Pre.Documents.Textlocate.TextlocateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Navix.FreightAudit.V2.Pre.Documents.DocumentsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DocumentsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/pre/documents", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Navix.FreightAudit.V2.Pre.Documents.DocumentsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DocumentsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/pre/documents", rawUrl)
        {
        }
        /// <summary>
        /// This endpoint ingests documents as a base64 string.  As the process is asynchronous the processed documents will not appear in the system instantaneously. * Uploads to this endpoint go through a complex machine learning process. It differs from the &apos;Document Attachment&apos; endpoint which simply allows files to be uploaded and associated with an existing invoice record. * This process works with models trained on an existing suite of auditing documents, and is occasionally supplemented by a human-in-the-loop to help guide and improve training.* It performs the following steps:   * Works with any sort of audit-related document (invoice, bill of lading, notice of assignment, etc.)   * Works with files in multiple formats (PDF, JPG, PNG, TIFF, etc.)  * Separates pages within a file into multiple documents as necessary (e.g. separates an invoice on page 1 of a PDF from the bill of lading on page 2 of the same PDF file)  * Converts all document formats to PDF  * Classifies the document (currently based on a list of around 30 different document types)  * Identifies relevant fields in the documents (”Invoice Date”, “Ship To”, “Bill To”, etc.)  * Transcribes text and data from the documents (using OCR)  * For invoice documents, creates a new invoice record, based on the data transcribed from the invoice.  This may include supplemental data from other documents in the same submission. That is, if page 1 was an invoice and page 2 was a bill of lading, data from the bill of lading might be used on the invoice record if it wasn&apos;t present on the invoice  * For non-invoice documents, attempts to match the document with an existing invoice record (using reference numbers and other identifiers)  * Attach the resulting PDF file(s) to the invoice record. This occurs for both the invoice document itself and supporting documents.You must be explicitly granted access to use this endpoint. Please contact your Customer Success Manager to request access.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Navix.FreightAudit.Models.BadRequestResponse">When receiving a 400 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(global::Navix.FreightAudit.Models.DocumentRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(global::Navix.FreightAudit.Models.DocumentRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Navix.FreightAudit.Models.BadRequestResponse.CreateFromDiscriminatorValue },
            };
            await RequestAdapter.SendNoContentAsync(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// This endpoint ingests documents as a base64 string.  As the process is asynchronous the processed documents will not appear in the system instantaneously. * Uploads to this endpoint go through a complex machine learning process. It differs from the &apos;Document Attachment&apos; endpoint which simply allows files to be uploaded and associated with an existing invoice record. * This process works with models trained on an existing suite of auditing documents, and is occasionally supplemented by a human-in-the-loop to help guide and improve training.* It performs the following steps:   * Works with any sort of audit-related document (invoice, bill of lading, notice of assignment, etc.)   * Works with files in multiple formats (PDF, JPG, PNG, TIFF, etc.)  * Separates pages within a file into multiple documents as necessary (e.g. separates an invoice on page 1 of a PDF from the bill of lading on page 2 of the same PDF file)  * Converts all document formats to PDF  * Classifies the document (currently based on a list of around 30 different document types)  * Identifies relevant fields in the documents (”Invoice Date”, “Ship To”, “Bill To”, etc.)  * Transcribes text and data from the documents (using OCR)  * For invoice documents, creates a new invoice record, based on the data transcribed from the invoice.  This may include supplemental data from other documents in the same submission. That is, if page 1 was an invoice and page 2 was a bill of lading, data from the bill of lading might be used on the invoice record if it wasn&apos;t present on the invoice  * For non-invoice documents, attempts to match the document with an existing invoice record (using reference numbers and other identifiers)  * Attach the resulting PDF file(s) to the invoice record. This occurs for both the invoice document itself and supporting documents.You must be explicitly granted access to use this endpoint. Please contact your Customer Success Manager to request access.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Navix.FreightAudit.Models.DocumentRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Navix.FreightAudit.Models.DocumentRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Navix.FreightAudit.V2.Pre.Documents.DocumentsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Navix.FreightAudit.V2.Pre.Documents.DocumentsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Navix.FreightAudit.V2.Pre.Documents.DocumentsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DocumentsRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
