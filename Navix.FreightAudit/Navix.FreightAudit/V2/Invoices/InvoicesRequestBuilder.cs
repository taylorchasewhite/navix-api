// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Navix.FreightAudit.Models;
using Navix.FreightAudit.V2.Invoices.Item;
using Navix.FreightAudit.V2.Invoices.Lookup;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Navix.FreightAudit.V2.Invoices
{
    /// <summary>
    /// Builds and executes requests for operations under \v2\invoices
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class InvoicesRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The lookup property</summary>
        public global::Navix.FreightAudit.V2.Invoices.Lookup.LookupRequestBuilder Lookup
        {
            get => new global::Navix.FreightAudit.V2.Invoices.Lookup.LookupRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the Navix.FreightAudit.v2.invoices.item collection</summary>
        /// <param name="position">(Required) The invoice UUID.</param>
        /// <returns>A <see cref="global::Navix.FreightAudit.V2.Invoices.Item.WithInvoiceUuItemRequestBuilder"/></returns>
        public global::Navix.FreightAudit.V2.Invoices.Item.WithInvoiceUuItemRequestBuilder this[Guid position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("invoiceUuid", position);
                return new global::Navix.FreightAudit.V2.Invoices.Item.WithInvoiceUuItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the Navix.FreightAudit.v2.invoices.item collection</summary>
        /// <param name="position">(Required) The invoice UUID.</param>
        /// <returns>A <see cref="global::Navix.FreightAudit.V2.Invoices.Item.WithInvoiceUuItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::Navix.FreightAudit.V2.Invoices.Item.WithInvoiceUuItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("invoiceUuid", position);
                return new global::Navix.FreightAudit.V2.Invoices.Item.WithInvoiceUuItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Navix.FreightAudit.V2.Invoices.InvoicesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public InvoicesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/invoices", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Navix.FreightAudit.V2.Invoices.InvoicesRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public InvoicesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/v2/invoices", rawUrl)
        {
        }
        /// <summary>
        /// This endpoint creates a new invoice. It&apos;s designed to be used if you want to create invoices directly from your TMS (or other system), instead of using EDI or email. Note that the invoice is not created immediately; it may take several minutes for the invoice to be fully ingested.Please note this endpoint is in provisional testing with beta tenants. Please reach out to your implementation manager or customer success contact to discuss the use of this endpoint.
        /// </summary>
        /// <returns>A <see cref="global::Navix.FreightAudit.Models.InvoiceAcceptedResponse"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Navix.FreightAudit.Models.BadRequestResponse">When receiving a 400 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Navix.FreightAudit.Models.InvoiceAcceptedResponse?> PostAsync(global::Navix.FreightAudit.Models.InvoiceRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Navix.FreightAudit.Models.InvoiceAcceptedResponse> PostAsync(global::Navix.FreightAudit.Models.InvoiceRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::Navix.FreightAudit.Models.BadRequestResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Navix.FreightAudit.Models.InvoiceAcceptedResponse>(requestInfo, global::Navix.FreightAudit.Models.InvoiceAcceptedResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// This endpoint creates a new invoice. It&apos;s designed to be used if you want to create invoices directly from your TMS (or other system), instead of using EDI or email. Note that the invoice is not created immediately; it may take several minutes for the invoice to be fully ingested.Please note this endpoint is in provisional testing with beta tenants. Please reach out to your implementation manager or customer success contact to discuss the use of this endpoint.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Navix.FreightAudit.Models.InvoiceRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Navix.FreightAudit.Models.InvoiceRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "text/plain;q=0.9");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Navix.FreightAudit.V2.Invoices.InvoicesRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Navix.FreightAudit.V2.Invoices.InvoicesRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Navix.FreightAudit.V2.Invoices.InvoicesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class InvoicesRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
