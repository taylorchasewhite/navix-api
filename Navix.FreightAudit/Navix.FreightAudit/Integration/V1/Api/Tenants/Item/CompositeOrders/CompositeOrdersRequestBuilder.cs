// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Navix.FreightAudit.Models.Order.Models.Integrations;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Navix.FreightAudit.Integration.V1.Api.Tenants.Item.CompositeOrders
{
    /// <summary>
    /// Builds and executes requests for operations under \integration\v1\api\tenants\{tenantUuid}\composite-orders
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CompositeOrdersRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::Navix.FreightAudit.Integration.V1.Api.Tenants.Item.CompositeOrders.CompositeOrdersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CompositeOrdersRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/integration/v1/api/tenants/{tenantUuid}/composite-orders", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Navix.FreightAudit.Integration.V1.Api.Tenants.Item.CompositeOrders.CompositeOrdersRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CompositeOrdersRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/integration/v1/api/tenants/{tenantUuid}/composite-orders", rawUrl)
        {
        }
        /// <summary>
        /// This endpoint is deprecated. Use the &quot;Create an Order&quot; endpoint listed under &quot;API V2&quot; instead.This endpoint will always create a new composite order - it is not idempotent. If an existing Order with the same Order Number is found, it will be replaced with the new one. In the case the existing order is matched to an invoice, it will also be replaced, given that the invoice has not been approved yet.The `enableValidations` property on the request body is used to determine whether or not to perform validations on the order. If validations are performed, any bad data will result in an error being returned; if validation are disabled, just about any data will be accepted. The validated fields include:* Transportation Mode* Transportation Service Level* Transportation Service Type* Currency* Billing Term* Customer* Vendor* Reference Number Type* Handling Unit* Charge Type
        /// </summary>
        /// <returns>A <see cref="string"/></returns>
        /// <param name="body">This is a composite order that can be created. It contains all the information needed to create a new order, including customer, vendor, stops, line items, and charges.</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<string?> PostAsync(global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<string> PostAsync(global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<string>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// This endpoint is deprecated. Use the &quot;Create an Order&quot; endpoint listed under &quot;API V2&quot; instead.This endpoint will always create a new composite order - it is not idempotent. If an existing Order with the same Order Number is found, it will be replaced with the new one. In the case the existing order is matched to an invoice, it will also be replaced, given that the invoice has not been approved yet.The `enableValidations` property on the request body is used to determine whether or not to perform validations on the order. If validations are performed, any bad data will result in an error being returned; if validation are disabled, just about any data will be accepted. The validated fields include:* Transportation Mode* Transportation Service Level* Transportation Service Type* Currency* Billing Term* Customer* Vendor* Reference Number Type* Handling Unit* Charge Type
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">This is a composite order that can be created. It contains all the information needed to create a new order, including customer, vendor, stops, line items, and charges.</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeRequest body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeRequest body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Navix.FreightAudit.Integration.V1.Api.Tenants.Item.CompositeOrders.CompositeOrdersRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        [Obsolete("")]
        public global::Navix.FreightAudit.Integration.V1.Api.Tenants.Item.CompositeOrders.CompositeOrdersRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Navix.FreightAudit.Integration.V1.Api.Tenants.Item.CompositeOrders.CompositeOrdersRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class CompositeOrdersRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
