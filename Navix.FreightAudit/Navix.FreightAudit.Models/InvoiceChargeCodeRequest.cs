// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Navix.FreightAudit.Models
{
    /// <summary>
    /// A list of charge codes.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class InvoiceChargeCodeRequest : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Code description</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The charge code type. If a tenant is normalizing their invoice charge codes and description before sending to Navix, they can send in the type as `Tenant` with the corresponding code and description. This will enable our application to display the charges based on Tenant Charge codes setup. This can be helpful when tenantâ€™s have mapped carrier charge codes in their system to handle rating engine requests. If a tenant leaves type as blank or sends in type `Vendor`, we will lookup against the Vendor charge codes based on code and description upon ingestion. Any unknown vendor charges will need to be mapped during the audit process to build out vendor charge code list.</summary>
        public global::Navix.FreightAudit.Models.InvoiceChargeCodeRequest_type? Type { get; set; }
        /// <summary>The Code value</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Value { get; set; }
#nullable restore
#else
        public string Value { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Navix.FreightAudit.Models.InvoiceChargeCodeRequest"/> and sets the default values.
        /// </summary>
        public InvoiceChargeCodeRequest()
        {
            AdditionalData = new Dictionary<string, object>();
            Type = global::Navix.FreightAudit.Models.InvoiceChargeCodeRequest_type.Vendor;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Navix.FreightAudit.Models.InvoiceChargeCodeRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Navix.FreightAudit.Models.InvoiceChargeCodeRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Navix.FreightAudit.Models.InvoiceChargeCodeRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "description", n => { Description = n.GetStringValue(); } },
                { "type", n => { Type = n.GetEnumValue<global::Navix.FreightAudit.Models.InvoiceChargeCodeRequest_type>(); } },
                { "value", n => { Value = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("description", Description);
            writer.WriteEnumValue<global::Navix.FreightAudit.Models.InvoiceChargeCodeRequest_type>("type", Type);
            writer.WriteStringValue("value", Value);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
