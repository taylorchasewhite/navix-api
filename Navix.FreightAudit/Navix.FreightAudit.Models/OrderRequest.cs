// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Navix.FreightAudit.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class OrderRequest : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The Order Customer</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Navix.FreightAudit.Models.OrderCustomerRequest? Customer { get; set; }
#nullable restore
#else
        public global::Navix.FreightAudit.Models.OrderCustomerRequest Customer { get; set; }
#endif
        /// <summary>The date on which the freight was delivered. Date Only</summary>
        public DateTimeOffset? DeliveryDate { get; set; }
        /// <summary>The external id of the order. If not provided will default to the order number provided</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalId { get; set; }
#nullable restore
#else
        public string ExternalId { get; set; }
#endif
        /// <summary>The list of Items</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Navix.FreightAudit.Models.OrderItemRequest>? Items { get; set; }
#nullable restore
#else
        public List<global::Navix.FreightAudit.Models.OrderItemRequest> Items { get; set; }
#endif
        /// <summary>Optional Order metadata, expressed as a key-value pair of key-value pairs. Note that this does *not* accept arbitrary JSON data, and does not support arrays. Top-level keys cannot have literal values, their children must be objects. For instance, the following is valid:```&quot;metadata&quot;: {  &quot;parentKey1&quot;: {    &quot;key1&quot;: &quot;value1&quot;,    &quot;key2&quot;: &quot;value2&quot;,  },  &quot;parentKey2&quot;: {    &quot;keyA&quot;: &quot;valueA&quot;,    &quot;keyB&quot;: &quot;valueB&quot;,  }}```You can use any valid JSON name for the key names on both parent and child objects, except for the `navix_` prefix, which is reserved.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Navix.FreightAudit.Models.OrderRequest_metadata? Metadata { get; set; }
#nullable restore
#else
        public global::Navix.FreightAudit.Models.OrderRequest_metadata Metadata { get; set; }
#endif
        /// <summary>The unique identifier for the Order</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderNumber { get; set; }
#nullable restore
#else
        public string OrderNumber { get; set; }
#endif
        /// <summary>An optional list of Reference Numbers</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Navix.FreightAudit.Models.OrderReferenceNumberRequest>? ReferenceNumbers { get; set; }
#nullable restore
#else
        public List<global::Navix.FreightAudit.Models.OrderReferenceNumberRequest> ReferenceNumbers { get; set; }
#endif
        /// <summary>The date on which the freight was shipped. Date Only</summary>
        public DateTimeOffset? ShipDate { get; set; }
        /// <summary>The list of Stops</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Navix.FreightAudit.Models.OrderStopRequest>? Stops { get; set; }
#nullable restore
#else
        public List<global::Navix.FreightAudit.Models.OrderStopRequest> Stops { get; set; }
#endif
        /// <summary>The Order Tags</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Navix.FreightAudit.Models.OrderTagsRequest? Tags { get; set; }
#nullable restore
#else
        public global::Navix.FreightAudit.Models.OrderTagsRequest Tags { get; set; }
#endif
        /// <summary>The list of Vendors. At least one is required. If multiple are provided, each externalId must appear only once.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Navix.FreightAudit.Models.OrderVendorRequest>? Vendors { get; set; }
#nullable restore
#else
        public List<global::Navix.FreightAudit.Models.OrderVendorRequest> Vendors { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Navix.FreightAudit.Models.OrderRequest"/> and sets the default values.
        /// </summary>
        public OrderRequest()
        {
            AdditionalData = new Dictionary<string, object>();
            ExternalId = "OrderNumber";
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Navix.FreightAudit.Models.OrderRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Navix.FreightAudit.Models.OrderRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Navix.FreightAudit.Models.OrderRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "customer", n => { Customer = n.GetObjectValue<global::Navix.FreightAudit.Models.OrderCustomerRequest>(global::Navix.FreightAudit.Models.OrderCustomerRequest.CreateFromDiscriminatorValue); } },
                { "deliveryDate", n => { DeliveryDate = n.GetDateTimeOffsetValue(); } },
                { "externalId", n => { ExternalId = n.GetStringValue(); } },
                { "items", n => { Items = n.GetCollectionOfObjectValues<global::Navix.FreightAudit.Models.OrderItemRequest>(global::Navix.FreightAudit.Models.OrderItemRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "metadata", n => { Metadata = n.GetObjectValue<global::Navix.FreightAudit.Models.OrderRequest_metadata>(global::Navix.FreightAudit.Models.OrderRequest_metadata.CreateFromDiscriminatorValue); } },
                { "orderNumber", n => { OrderNumber = n.GetStringValue(); } },
                { "referenceNumbers", n => { ReferenceNumbers = n.GetCollectionOfObjectValues<global::Navix.FreightAudit.Models.OrderReferenceNumberRequest>(global::Navix.FreightAudit.Models.OrderReferenceNumberRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "shipDate", n => { ShipDate = n.GetDateTimeOffsetValue(); } },
                { "stops", n => { Stops = n.GetCollectionOfObjectValues<global::Navix.FreightAudit.Models.OrderStopRequest>(global::Navix.FreightAudit.Models.OrderStopRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "tags", n => { Tags = n.GetObjectValue<global::Navix.FreightAudit.Models.OrderTagsRequest>(global::Navix.FreightAudit.Models.OrderTagsRequest.CreateFromDiscriminatorValue); } },
                { "vendors", n => { Vendors = n.GetCollectionOfObjectValues<global::Navix.FreightAudit.Models.OrderVendorRequest>(global::Navix.FreightAudit.Models.OrderVendorRequest.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Navix.FreightAudit.Models.OrderCustomerRequest>("customer", Customer);
            writer.WriteDateTimeOffsetValue("deliveryDate", DeliveryDate);
            writer.WriteStringValue("externalId", ExternalId);
            writer.WriteCollectionOfObjectValues<global::Navix.FreightAudit.Models.OrderItemRequest>("items", Items);
            writer.WriteObjectValue<global::Navix.FreightAudit.Models.OrderRequest_metadata>("metadata", Metadata);
            writer.WriteStringValue("orderNumber", OrderNumber);
            writer.WriteCollectionOfObjectValues<global::Navix.FreightAudit.Models.OrderReferenceNumberRequest>("referenceNumbers", ReferenceNumbers);
            writer.WriteDateTimeOffsetValue("shipDate", ShipDate);
            writer.WriteCollectionOfObjectValues<global::Navix.FreightAudit.Models.OrderStopRequest>("stops", Stops);
            writer.WriteObjectValue<global::Navix.FreightAudit.Models.OrderTagsRequest>("tags", Tags);
            writer.WriteCollectionOfObjectValues<global::Navix.FreightAudit.Models.OrderVendorRequest>("vendors", Vendors);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
