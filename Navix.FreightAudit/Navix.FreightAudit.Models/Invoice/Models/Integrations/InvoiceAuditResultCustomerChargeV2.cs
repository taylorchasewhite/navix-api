// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Navix.FreightAudit.Models.Invoice.Models.Integrations
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class InvoiceAuditResultCustomerChargeV2 : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The finalized charge amount after auditing.</summary>
        public double? Charge { get; set; }
        /// <summary>The code used by the tenant to identify this specific charge; this likely corresponds to a code in the tenant&apos;s TMS.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Code { get; set; }
#nullable restore
#else
        public string Code { get; set; }
#endif
        /// <summary>The description that accompanies `Code`. Codes and descriptions are both provided by the tenant.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The reason that accompanies the finalized charge amount. This may be empty if there is no variance.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Reason { get; set; }
#nullable restore
#else
        public string Reason { get; set; }
#endif
        /// <summary>This type or category for the charge. This may or may not have meaning to the API consumer&apos;s system. A &quot;Type&quot; is a parent for a &quot;Code&quot;; that is, there&apos;s a 1:* relationship between Type and Code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The unique identifier for the charge type.</summary>
        public Guid? TypeUuid { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Navix.FreightAudit.Models.Invoice.Models.Integrations.InvoiceAuditResultCustomerChargeV2"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Navix.FreightAudit.Models.Invoice.Models.Integrations.InvoiceAuditResultCustomerChargeV2 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Navix.FreightAudit.Models.Invoice.Models.Integrations.InvoiceAuditResultCustomerChargeV2();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "charge", n => { Charge = n.GetDoubleValue(); } },
                { "code", n => { Code = n.GetStringValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "reason", n => { Reason = n.GetStringValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
                { "typeUuid", n => { TypeUuid = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("charge", Charge);
            writer.WriteStringValue("code", Code);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("reason", Reason);
            writer.WriteStringValue("type", Type);
            writer.WriteGuidValue("typeUuid", TypeUuid);
        }
    }
}
#pragma warning restore CS0618
