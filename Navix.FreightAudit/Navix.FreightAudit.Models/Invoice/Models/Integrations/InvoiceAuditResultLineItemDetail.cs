// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Navix.FreightAudit.Models.Invoice.Models.Integrations
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class InvoiceAuditResultLineItemDetail : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The class of this line item. Note that this is a decimal value, so it could be values like `50` or `77.5`</summary>
        public double? Class { get; set; }
        /// <summary>The line item description</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Handling unit count of this line item</summary>
        public int? HandlingUnitCount { get; set; }
        /// <summary>The NMFC code of this line item</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NmfcCode { get; set; }
#nullable restore
#else
        public string NmfcCode { get; set; }
#endif
        /// <summary>Order line item ID</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderLineItemId { get; set; }
#nullable restore
#else
        public string OrderLineItemId { get; set; }
#endif
        /// <summary>Total pieces of this line item</summary>
        public int? TotalPieces { get; set; }
        /// <summary>The weight of this line item</summary>
        public double? Weight { get; set; }
        /// <summary>The weight unit of this line item.  Possible values include:* `LBS`* `KGS`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WeightUnit { get; set; }
#nullable restore
#else
        public string WeightUnit { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Navix.FreightAudit.Models.Invoice.Models.Integrations.InvoiceAuditResultLineItemDetail"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Navix.FreightAudit.Models.Invoice.Models.Integrations.InvoiceAuditResultLineItemDetail CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Navix.FreightAudit.Models.Invoice.Models.Integrations.InvoiceAuditResultLineItemDetail();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "class", n => { Class = n.GetDoubleValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "handlingUnitCount", n => { HandlingUnitCount = n.GetIntValue(); } },
                { "nmfcCode", n => { NmfcCode = n.GetStringValue(); } },
                { "orderLineItemId", n => { OrderLineItemId = n.GetStringValue(); } },
                { "totalPieces", n => { TotalPieces = n.GetIntValue(); } },
                { "weight", n => { Weight = n.GetDoubleValue(); } },
                { "weightUnit", n => { WeightUnit = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("class", Class);
            writer.WriteStringValue("description", Description);
            writer.WriteIntValue("handlingUnitCount", HandlingUnitCount);
            writer.WriteStringValue("nmfcCode", NmfcCode);
            writer.WriteStringValue("orderLineItemId", OrderLineItemId);
            writer.WriteIntValue("totalPieces", TotalPieces);
            writer.WriteDoubleValue("weight", Weight);
            writer.WriteStringValue("weightUnit", WeightUnit);
        }
    }
}
#pragma warning restore CS0618
