// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Navix.FreightAudit.Models.Invoice.Application.Models.Enums;
using System.Collections.Generic;
using System.IO;
using System;
namespace Navix.FreightAudit.Models.Invoice.Models.Integrations
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class InvoiceAuditResultDocumentV2 : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Whether or not the document has a signature.</summary>
        public bool? HasSignature { get; set; }
        /// <summary>Whether or not the document has been redacted.</summary>
        public bool? IsRedacted { get; set; }
        /// <summary>The name of the user who last modified the document.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ModifiedBy { get; set; }
#nullable restore
#else
        public string ModifiedBy { get; set; }
#endif
        /// <summary>The date the document was last modified.</summary>
        public Date? ModifiedDate { get; set; }
        /// <summary>The name of the document.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>If the document has been redacted, the UUID of the redacted version of the document.</summary>
        public Guid? RedactedDocumentUuid { get; set; }
        /// <summary>The standardizedType property</summary>
        public global::Navix.FreightAudit.Models.Invoice.Application.Models.Enums.VendorInvoiceDocumentTypesEnum? StandardizedType { get; set; }
        /// <summary>The submitted name of the document.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubmittedName { get; set; }
#nullable restore
#else
        public string SubmittedName { get; set; }
#endif
        /// <summary>The type of document. This is a more human-readable version of the `StandardizedType` -- e.g., the `Type` might be &quot;Delivery Receipt&quot; while the `StandardizedType` would be `DeliveryReceipt`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>The UUID of the document. This can be used with the &quot;Download invoice document&quot; endpoint to retrieve the binary document file.</summary>
        public Guid? Uuid { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Navix.FreightAudit.Models.Invoice.Models.Integrations.InvoiceAuditResultDocumentV2"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Navix.FreightAudit.Models.Invoice.Models.Integrations.InvoiceAuditResultDocumentV2 CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Navix.FreightAudit.Models.Invoice.Models.Integrations.InvoiceAuditResultDocumentV2();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "hasSignature", n => { HasSignature = n.GetBoolValue(); } },
                { "isRedacted", n => { IsRedacted = n.GetBoolValue(); } },
                { "modifiedBy", n => { ModifiedBy = n.GetStringValue(); } },
                { "modifiedDate", n => { ModifiedDate = n.GetDateValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "redactedDocumentUuid", n => { RedactedDocumentUuid = n.GetGuidValue(); } },
                { "standardizedType", n => { StandardizedType = n.GetEnumValue<global::Navix.FreightAudit.Models.Invoice.Application.Models.Enums.VendorInvoiceDocumentTypesEnum>(); } },
                { "submittedName", n => { SubmittedName = n.GetStringValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
                { "uuid", n => { Uuid = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("hasSignature", HasSignature);
            writer.WriteBoolValue("isRedacted", IsRedacted);
            writer.WriteStringValue("modifiedBy", ModifiedBy);
            writer.WriteDateValue("modifiedDate", ModifiedDate);
            writer.WriteStringValue("name", Name);
            writer.WriteGuidValue("redactedDocumentUuid", RedactedDocumentUuid);
            writer.WriteEnumValue<global::Navix.FreightAudit.Models.Invoice.Application.Models.Enums.VendorInvoiceDocumentTypesEnum>("standardizedType", StandardizedType);
            writer.WriteStringValue("submittedName", SubmittedName);
            writer.WriteStringValue("type", Type);
            writer.WriteGuidValue("uuid", Uuid);
        }
    }
}
#pragma warning restore CS0618
