// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Navix.FreightAudit.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DisputeResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The date on which the dispute was created</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>A concurrency key for the dispute. When mutating a dispute, the request will be rejected as a 409 Conflict if the eTag doesn&apos;t match the current eTag value for the dispute</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ETag { get; set; }
#nullable restore
#else
        public string ETag { get; set; }
#endif
        /// <summary>The party to which the dispute applies</summary>
        public global::Navix.FreightAudit.Models.DisputeResponse_party? Party { get; set; }
        /// <summary>The reasons for the dispute. Note that a single dispute may have multiple reasons</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Navix.FreightAudit.Models.DisputeReasonResponse>? Reasons { get; set; }
#nullable restore
#else
        public List<global::Navix.FreightAudit.Models.DisputeReasonResponse> Reasons { get; set; }
#endif
        /// <summary>The date on which the dispute was resolved. The dispute is considered resolved when all dispute reasons have been resolved. This is null on an active (unresolved) dispute</summary>
        public DateTimeOffset? ResolvedAt { get; set; }
        /// <summary>The unique identifier of the dispute</summary>
        public Guid? Uuid { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Navix.FreightAudit.Models.DisputeResponse"/> and sets the default values.
        /// </summary>
        public DisputeResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Navix.FreightAudit.Models.DisputeResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Navix.FreightAudit.Models.DisputeResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Navix.FreightAudit.Models.DisputeResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "createdAt", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "eTag", n => { ETag = n.GetStringValue(); } },
                { "party", n => { Party = n.GetEnumValue<global::Navix.FreightAudit.Models.DisputeResponse_party>(); } },
                { "reasons", n => { Reasons = n.GetCollectionOfObjectValues<global::Navix.FreightAudit.Models.DisputeReasonResponse>(global::Navix.FreightAudit.Models.DisputeReasonResponse.CreateFromDiscriminatorValue)?.AsList(); } },
                { "resolvedAt", n => { ResolvedAt = n.GetDateTimeOffsetValue(); } },
                { "uuid", n => { Uuid = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("createdAt", CreatedAt);
            writer.WriteStringValue("eTag", ETag);
            writer.WriteEnumValue<global::Navix.FreightAudit.Models.DisputeResponse_party>("party", Party);
            writer.WriteCollectionOfObjectValues<global::Navix.FreightAudit.Models.DisputeReasonResponse>("reasons", Reasons);
            writer.WriteDateTimeOffsetValue("resolvedAt", ResolvedAt);
            writer.WriteGuidValue("uuid", Uuid);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
