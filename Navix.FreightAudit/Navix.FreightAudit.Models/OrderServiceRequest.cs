// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Navix.FreightAudit.Models
{
    /// <summary>
    /// The Service information
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class OrderServiceRequest : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The physical equipment used</summary>
        public global::Navix.FreightAudit.Models.OrderServiceRequest_equipment? Equipment { get; set; }
        /// <summary>The transportation service level</summary>
        public global::Navix.FreightAudit.Models.OrderServiceRequest_level? Level { get; set; }
        /// <summary>The transportation mode</summary>
        public global::Navix.FreightAudit.Models.OrderServiceRequest_mode? Mode { get; set; }
        /// <summary>The transportation service type</summary>
        public global::Navix.FreightAudit.Models.OrderServiceRequest_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Navix.FreightAudit.Models.OrderServiceRequest"/> and sets the default values.
        /// </summary>
        public OrderServiceRequest()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Navix.FreightAudit.Models.OrderServiceRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Navix.FreightAudit.Models.OrderServiceRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Navix.FreightAudit.Models.OrderServiceRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "equipment", n => { Equipment = n.GetEnumValue<global::Navix.FreightAudit.Models.OrderServiceRequest_equipment>(); } },
                { "level", n => { Level = n.GetEnumValue<global::Navix.FreightAudit.Models.OrderServiceRequest_level>(); } },
                { "mode", n => { Mode = n.GetEnumValue<global::Navix.FreightAudit.Models.OrderServiceRequest_mode>(); } },
                { "type", n => { Type = n.GetEnumValue<global::Navix.FreightAudit.Models.OrderServiceRequest_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Navix.FreightAudit.Models.OrderServiceRequest_equipment>("equipment", Equipment);
            writer.WriteEnumValue<global::Navix.FreightAudit.Models.OrderServiceRequest_level>("level", Level);
            writer.WriteEnumValue<global::Navix.FreightAudit.Models.OrderServiceRequest_mode>("mode", Mode);
            writer.WriteEnumValue<global::Navix.FreightAudit.Models.OrderServiceRequest_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
