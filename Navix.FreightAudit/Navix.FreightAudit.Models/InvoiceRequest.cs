// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Navix.FreightAudit.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class InvoiceRequest : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The list of charges</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Navix.FreightAudit.Models.InvoiceChargeRequest>? Charges { get; set; }
#nullable restore
#else
        public List<global::Navix.FreightAudit.Models.InvoiceChargeRequest> Charges { get; set; }
#endif
        /// <summary>The freight payment terms</summary>
        public global::Navix.FreightAudit.Models.InvoiceRequest_chargeTerms? ChargeTerms { get; set; }
        /// <summary>The three character ISO 4217 code for the Invoice currency. Defaults to &apos;USD&apos; when empty</summary>
        public global::Navix.FreightAudit.Models.InvoiceRequest_currency? Currency { get; set; }
        /// <summary>If applicable, tenants can send in the associated Customer on an Invoice. This externalId will not be validated and if the Customer is not found in Navix we will show in  UI as no customer selected</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Navix.FreightAudit.Models.InvoiceCustomerRequest? Customer { get; set; }
#nullable restore
#else
        public global::Navix.FreightAudit.Models.InvoiceCustomerRequest Customer { get; set; }
#endif
        /// <summary>The date on which the freight was delivered</summary>
        public DateTimeOffset? DeliveryDate { get; set; }
        /// <summary>The external id of the invoice. If not provided will default to the invoice number provided</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalId { get; set; }
#nullable restore
#else
        public string ExternalId { get; set; }
#endif
        /// <summary>The date on which the Invoice was generated</summary>
        public DateTimeOffset? InvoiceDate { get; set; }
        /// <summary>The unique identifier for the Invoice</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? InvoiceNumber { get; set; }
#nullable restore
#else
        public string InvoiceNumber { get; set; }
#endif
        /// <summary>The list of items</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Navix.FreightAudit.Models.InvoiceItemRequest>? Items { get; set; }
#nullable restore
#else
        public List<global::Navix.FreightAudit.Models.InvoiceItemRequest> Items { get; set; }
#endif
        /// <summary>The invoice payment terms</summary>
        public global::Navix.FreightAudit.Models.InvoiceRequest_paymentTerms? PaymentTerms { get; set; }
        /// <summary>An optional list of reference numbers</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Navix.FreightAudit.Models.InvoiceReferenceNumberRequest>? ReferenceNumbers { get; set; }
#nullable restore
#else
        public List<global::Navix.FreightAudit.Models.InvoiceReferenceNumberRequest> ReferenceNumbers { get; set; }
#endif
        /// <summary>The invoice service information</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Navix.FreightAudit.Models.InvoiceServiceRequest? Service { get; set; }
#nullable restore
#else
        public global::Navix.FreightAudit.Models.InvoiceServiceRequest Service { get; set; }
#endif
        /// <summary>The date on which the freight was shipped</summary>
        public DateTimeOffset? ShipDate { get; set; }
        /// <summary>The list of stops</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Navix.FreightAudit.Models.InvoiceStopRequest>? Stops { get; set; }
#nullable restore
#else
        public List<global::Navix.FreightAudit.Models.InvoiceStopRequest> Stops { get; set; }
#endif
        /// <summary>The invoice type. Defaults to &apos;Invoice&apos; when empty.</summary>
        public global::Navix.FreightAudit.Models.InvoiceRequest_type? Type { get; set; }
        /// <summary>The Tenant&apos;s unique identifier for the Vendor. This value should match the value used when creating Orders programatically.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Navix.FreightAudit.Models.InvoiceVendorRequest? Vendor { get; set; }
#nullable restore
#else
        public global::Navix.FreightAudit.Models.InvoiceVendorRequest Vendor { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Navix.FreightAudit.Models.InvoiceRequest"/> and sets the default values.
        /// </summary>
        public InvoiceRequest()
        {
            AdditionalData = new Dictionary<string, object>();
            Currency = global::Navix.FreightAudit.Models.InvoiceRequest_currency.USD;
            ExternalId = "InvoiceNumber";
            Type = global::Navix.FreightAudit.Models.InvoiceRequest_type.Invoice;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Navix.FreightAudit.Models.InvoiceRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Navix.FreightAudit.Models.InvoiceRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Navix.FreightAudit.Models.InvoiceRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "chargeTerms", n => { ChargeTerms = n.GetEnumValue<global::Navix.FreightAudit.Models.InvoiceRequest_chargeTerms>(); } },
                { "charges", n => { Charges = n.GetCollectionOfObjectValues<global::Navix.FreightAudit.Models.InvoiceChargeRequest>(global::Navix.FreightAudit.Models.InvoiceChargeRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "currency", n => { Currency = n.GetEnumValue<global::Navix.FreightAudit.Models.InvoiceRequest_currency>(); } },
                { "customer", n => { Customer = n.GetObjectValue<global::Navix.FreightAudit.Models.InvoiceCustomerRequest>(global::Navix.FreightAudit.Models.InvoiceCustomerRequest.CreateFromDiscriminatorValue); } },
                { "deliveryDate", n => { DeliveryDate = n.GetDateTimeOffsetValue(); } },
                { "externalId", n => { ExternalId = n.GetStringValue(); } },
                { "invoiceDate", n => { InvoiceDate = n.GetDateTimeOffsetValue(); } },
                { "invoiceNumber", n => { InvoiceNumber = n.GetStringValue(); } },
                { "items", n => { Items = n.GetCollectionOfObjectValues<global::Navix.FreightAudit.Models.InvoiceItemRequest>(global::Navix.FreightAudit.Models.InvoiceItemRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "paymentTerms", n => { PaymentTerms = n.GetEnumValue<global::Navix.FreightAudit.Models.InvoiceRequest_paymentTerms>(); } },
                { "referenceNumbers", n => { ReferenceNumbers = n.GetCollectionOfObjectValues<global::Navix.FreightAudit.Models.InvoiceReferenceNumberRequest>(global::Navix.FreightAudit.Models.InvoiceReferenceNumberRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "service", n => { Service = n.GetObjectValue<global::Navix.FreightAudit.Models.InvoiceServiceRequest>(global::Navix.FreightAudit.Models.InvoiceServiceRequest.CreateFromDiscriminatorValue); } },
                { "shipDate", n => { ShipDate = n.GetDateTimeOffsetValue(); } },
                { "stops", n => { Stops = n.GetCollectionOfObjectValues<global::Navix.FreightAudit.Models.InvoiceStopRequest>(global::Navix.FreightAudit.Models.InvoiceStopRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "type", n => { Type = n.GetEnumValue<global::Navix.FreightAudit.Models.InvoiceRequest_type>(); } },
                { "vendor", n => { Vendor = n.GetObjectValue<global::Navix.FreightAudit.Models.InvoiceVendorRequest>(global::Navix.FreightAudit.Models.InvoiceVendorRequest.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Navix.FreightAudit.Models.InvoiceChargeRequest>("charges", Charges);
            writer.WriteEnumValue<global::Navix.FreightAudit.Models.InvoiceRequest_chargeTerms>("chargeTerms", ChargeTerms);
            writer.WriteEnumValue<global::Navix.FreightAudit.Models.InvoiceRequest_currency>("currency", Currency);
            writer.WriteObjectValue<global::Navix.FreightAudit.Models.InvoiceCustomerRequest>("customer", Customer);
            writer.WriteDateTimeOffsetValue("deliveryDate", DeliveryDate);
            writer.WriteStringValue("externalId", ExternalId);
            writer.WriteDateTimeOffsetValue("invoiceDate", InvoiceDate);
            writer.WriteStringValue("invoiceNumber", InvoiceNumber);
            writer.WriteCollectionOfObjectValues<global::Navix.FreightAudit.Models.InvoiceItemRequest>("items", Items);
            writer.WriteEnumValue<global::Navix.FreightAudit.Models.InvoiceRequest_paymentTerms>("paymentTerms", PaymentTerms);
            writer.WriteCollectionOfObjectValues<global::Navix.FreightAudit.Models.InvoiceReferenceNumberRequest>("referenceNumbers", ReferenceNumbers);
            writer.WriteObjectValue<global::Navix.FreightAudit.Models.InvoiceServiceRequest>("service", Service);
            writer.WriteDateTimeOffsetValue("shipDate", ShipDate);
            writer.WriteCollectionOfObjectValues<global::Navix.FreightAudit.Models.InvoiceStopRequest>("stops", Stops);
            writer.WriteEnumValue<global::Navix.FreightAudit.Models.InvoiceRequest_type>("type", Type);
            writer.WriteObjectValue<global::Navix.FreightAudit.Models.InvoiceVendorRequest>("vendor", Vendor);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
