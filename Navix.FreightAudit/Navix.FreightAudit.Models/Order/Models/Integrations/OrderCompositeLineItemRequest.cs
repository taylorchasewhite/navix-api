// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Navix.FreightAudit.Models.Order.Models.Integrations
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class OrderCompositeLineItemRequest : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The class for the line item. Possible values include:* `50`* `55`* `60`* `65`* `70`* `77.5`* `85`* `92.5`* `100`* `110`* `125`* `150`* `175`* `200`* `250`* `300`* `400`* `500`</summary>
        public double? Class { get; set; }
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The units that apply to length, width, and height. Possible values are:* `IN`* `CM`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DimUnits { get; set; }
#nullable restore
#else
        public string DimUnits { get; set; }
#endif
        /// <summary>Possible values include:* `Pallet`* `Drum`* `Bags`* `Barrels`* `Crates`* `Bundles`* `Piece`* `Loose`* `Boxes`* `Cases`* `Carton`* `Totes`* `Cans`* `Cylinders`* `FlatRacks`* `Kegs`* `Pails`* `Reels`* `Rolls`* `Tanks`* `Tubes`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HandlingUnit { get; set; }
#nullable restore
#else
        public string HandlingUnit { get; set; }
#endif
        /// <summary>The handlingUnitCount property</summary>
        public int? HandlingUnitCount { get; set; }
        /// <summary>The height property</summary>
        public double? Height { get; set; }
        /// <summary>The length property</summary>
        public double? Length { get; set; }
        /// <summary>The nmfcCode property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NmfcCode { get; set; }
#nullable restore
#else
        public string NmfcCode { get; set; }
#endif
        /// <summary>The sequenceNum property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SequenceNum { get; set; }
#nullable restore
#else
        public string SequenceNum { get; set; }
#endif
        /// <summary>The totalPieces property</summary>
        public int? TotalPieces { get; set; }
        /// <summary>The uuid property</summary>
        public Guid? Uuid { get; set; }
        /// <summary>The weight property</summary>
        public double? Weight { get; set; }
        /// <summary>The unit applied to the `Weight` field. Possible values include:* `LBS`* `KG`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WeightUnit { get; set; }
#nullable restore
#else
        public string WeightUnit { get; set; }
#endif
        /// <summary>The width property</summary>
        public double? Width { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeLineItemRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeLineItemRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeLineItemRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "class", n => { Class = n.GetDoubleValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "dimUnits", n => { DimUnits = n.GetStringValue(); } },
                { "handlingUnit", n => { HandlingUnit = n.GetStringValue(); } },
                { "handlingUnitCount", n => { HandlingUnitCount = n.GetIntValue(); } },
                { "height", n => { Height = n.GetDoubleValue(); } },
                { "length", n => { Length = n.GetDoubleValue(); } },
                { "nmfcCode", n => { NmfcCode = n.GetStringValue(); } },
                { "sequenceNum", n => { SequenceNum = n.GetStringValue(); } },
                { "totalPieces", n => { TotalPieces = n.GetIntValue(); } },
                { "uuid", n => { Uuid = n.GetGuidValue(); } },
                { "weight", n => { Weight = n.GetDoubleValue(); } },
                { "weightUnit", n => { WeightUnit = n.GetStringValue(); } },
                { "width", n => { Width = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("class", Class);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("dimUnits", DimUnits);
            writer.WriteStringValue("handlingUnit", HandlingUnit);
            writer.WriteIntValue("handlingUnitCount", HandlingUnitCount);
            writer.WriteDoubleValue("height", Height);
            writer.WriteDoubleValue("length", Length);
            writer.WriteStringValue("nmfcCode", NmfcCode);
            writer.WriteStringValue("sequenceNum", SequenceNum);
            writer.WriteIntValue("totalPieces", TotalPieces);
            writer.WriteGuidValue("uuid", Uuid);
            writer.WriteDoubleValue("weight", Weight);
            writer.WriteStringValue("weightUnit", WeightUnit);
            writer.WriteDoubleValue("width", Width);
        }
    }
}
#pragma warning restore CS0618
