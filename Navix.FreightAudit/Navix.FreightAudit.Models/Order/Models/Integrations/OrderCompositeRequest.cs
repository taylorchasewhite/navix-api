// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Navix.FreightAudit.Models.Customer.Api.Models.Requests.Integrations;
using Navix.FreightAudit.Models.Vendor.Models.Requests.Integrations;
using System.Collections.Generic;
using System.IO;
using System;
namespace Navix.FreightAudit.Models.Order.Models.Integrations
{
    /// <summary>
    /// This is a composite order that can be created. It contains all the information needed to create a new order, including customer, vendor, stops, line items, and charges.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class OrderCompositeRequest : IParsable
    {
        /// <summary>The actualShipmentWeight property</summary>
        public double? ActualShipmentWeight { get; set; }
        /// <summary>The billing term for the order. This field is required if validations are enabled. Possible values are:* `Net 0`* `Net 1`* `Net 2`* `Net 5`* `Net 7`* `Net 10`* `Net 14`* `Net 15`* `Net 20`* `Net 21`* `Net 24`* `Net 25`* `Net 27`* `Net 28`* `Net 29`* `Net 30`* `Net 31`* `Net 32`* `Net 33`* `Net 35`* `Net 40`* `Net 45`* `Net 47`* `Net 50`* `Net 55`* `Net 60`* `Net 65`* `Net 67`* `Net 75`* `Net 90`* `Net 99`* `Net 120`* `Prepaid`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BillingTerm { get; set; }
#nullable restore
#else
        public string BillingTerm { get; set; }
#endif
        /// <summary>Deprecated. Replaced by VendorCharges</summary>
        [Obsolete("")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeChargeRequest>? Charges { get; set; }
#nullable restore
#else
        public List<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeChargeRequest> Charges { get; set; }
#endif
        /// <summary>The cubicMeter property</summary>
        public double? CubicMeter { get; set; }
        /// <summary>The currency for the order. Defaults to USD. Possible values are:* `USD`* `CAD`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>The customer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Navix.FreightAudit.Models.Customer.Api.Models.Requests.Integrations.CustomerRequest? Customer { get; set; }
#nullable restore
#else
        public global::Navix.FreightAudit.Models.Customer.Api.Models.Requests.Integrations.CustomerRequest Customer { get; set; }
#endif
        /// <summary>The customerCharge property</summary>
        public double? CustomerCharge { get; set; }
        /// <summary>The customerCharges property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeChargeRequest>? CustomerCharges { get; set; }
#nullable restore
#else
        public List<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeChargeRequest> CustomerCharges { get; set; }
#endif
        /// <summary>The deliveredDate property</summary>
        public DateTimeOffset? DeliveredDate { get; set; }
        /// <summary>The deliverTime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeliverTime { get; set; }
#nullable restore
#else
        public string DeliverTime { get; set; }
#endif
        /// <summary>The distance property</summary>
        public double? Distance { get; set; }
        /// <summary>A tenant&apos;s arbitrary way to segment the order amongst multiple orders. Ex. values could be names of different departments at the tenant, or names of different teams</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Division { get; set; }
#nullable restore
#else
        public string Division { get; set; }
#endif
        /// <summary>If set to true, the order will be validated before being created, and an error will be returned if any validations fail.</summary>
        public bool? EnableValidations { get; set; }
        /// <summary>The freight charge terms for the order. This field is required if validations are enabled. Possible values are:* `Collect`* `Prepaid`* `Prepaid &amp; Add`* `Third Party`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FreightChargeTerms { get; set; }
#nullable restore
#else
        public string FreightChargeTerms { get; set; }
#endif
        /// <summary>The lineItems property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeLineItemRequest>? LineItems { get; set; }
#nullable restore
#else
        public List<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeLineItemRequest> LineItems { get; set; }
#endif
        /// <summary>The metadata property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Metadata { get; set; }
#nullable restore
#else
        public string Metadata { get; set; }
#endif
        /// <summary>The unique identifier for the Order (i.e, &quot;Load Number&quot;, &quot;Shipment Number&quot;). This value should be the commonly known identifier for the order that is shared with Vendors (i.e., &quot;Carrier&quot;).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OrderNumber { get; set; }
#nullable restore
#else
        public string OrderNumber { get; set; }
#endif
        /// <summary>The paymentTerms property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PaymentTerms { get; set; }
#nullable restore
#else
        public string PaymentTerms { get; set; }
#endif
        /// <summary>The plannedShipmentWeight property</summary>
        public double? PlannedShipmentWeight { get; set; }
        /// <summary>Rating Engine information used by the Navix Rating Engine Integration. This field is optional and should be a list of key value pairs as json.Here are some predefined pairs:&lt;br /&gt;{&lt;br /&gt;  &quot;VendorAccountUserName&quot;: &quot;value&quot;,&lt;br /&gt;  &quot;VendorAccountPassword&quot;: &quot;value&quot;,&lt;br /&gt;  &quot;ContractID&quot;: &quot;value&quot;,&lt;br /&gt;  &quot;ContractName&quot;: &quot;value&quot;,&lt;br /&gt;  &quot;ServiceType&quot;: &quot;value&quot;&lt;br /&gt;}</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RatingEngineInfo { get; set; }
#nullable restore
#else
        public string RatingEngineInfo { get; set; }
#endif
        /// <summary>The referenceNumbers property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeReferenceNumberRequest>? ReferenceNumbers { get; set; }
#nullable restore
#else
        public List<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeReferenceNumberRequest> ReferenceNumbers { get; set; }
#endif
        /// <summary>The shipDate property</summary>
        public DateTimeOffset? ShipDate { get; set; }
        /// <summary>The stops property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeStopRequest>? Stops { get; set; }
#nullable restore
#else
        public List<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeStopRequest> Stops { get; set; }
#endif
        /// <summary>The mode for the order. This field is required if validations are enabled. Possible values are:* `Ground`* `Air`* `Non-Freight`* `Ocean`* `Rail`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransportationMode { get; set; }
#nullable restore
#else
        public string TransportationMode { get; set; }
#endif
        /// <summary>The service level for the order. This field is required if validations are enabled. Possible values are:* `Standard`* `Next Day AM`* `Next Day PM`* `2nd Day`* `Deferred`* `3-5 Day`* `International`* `Next Day`* `Volume`* `Conestoga`* `Consolidation`* `Flatbed`* `Temperature Controlled`* `4PL`* `Priority`* `Economy`* `Guaranteed`* `Guaranteed Exclusive`* `TCSW`* `TCSP`* `Power Only`* `Drop Trailer`* `Dump Trailer`* `Guaranteed 5PM`* `Guaranteed 12PM`* `Guaranteed 330PM`* `Pilot Car`* `Installation`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransportationServiceLevel { get; set; }
#nullable restore
#else
        public string TransportationServiceLevel { get; set; }
#endif
        /// <summary>The service type for the order. Possible values if validations are enabled or it can be undefined:        * `LTL`* `TL`* `Parcel`* `Expedited`* `Air`* `Cartage`* `Drayage`* `Guaranteed`* `Intermodal`* `Warehouse`* `4PL`* `Ocean`* `Rail`* `Service`</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TransportationServiceType { get; set; }
#nullable restore
#else
        public string TransportationServiceType { get; set; }
#endif
        /// <summary>The uuid property</summary>
        public Guid? Uuid { get; set; }
        /// <summary>The vendor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Navix.FreightAudit.Models.Vendor.Models.Requests.Integrations.VendorRequest? Vendor { get; set; }
#nullable restore
#else
        public global::Navix.FreightAudit.Models.Vendor.Models.Requests.Integrations.VendorRequest Vendor { get; set; }
#endif
        /// <summary>The vendorCharges property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeChargeRequest>? VendorCharges { get; set; }
#nullable restore
#else
        public List<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeChargeRequest> VendorCharges { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "actualShipmentWeight", n => { ActualShipmentWeight = n.GetDoubleValue(); } },
                { "billingTerm", n => { BillingTerm = n.GetStringValue(); } },
                { "charges", n => { Charges = n.GetCollectionOfObjectValues<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeChargeRequest>(global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeChargeRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "cubicMeter", n => { CubicMeter = n.GetDoubleValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "customer", n => { Customer = n.GetObjectValue<global::Navix.FreightAudit.Models.Customer.Api.Models.Requests.Integrations.CustomerRequest>(global::Navix.FreightAudit.Models.Customer.Api.Models.Requests.Integrations.CustomerRequest.CreateFromDiscriminatorValue); } },
                { "customerCharge", n => { CustomerCharge = n.GetDoubleValue(); } },
                { "customerCharges", n => { CustomerCharges = n.GetCollectionOfObjectValues<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeChargeRequest>(global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeChargeRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "deliverTime", n => { DeliverTime = n.GetStringValue(); } },
                { "deliveredDate", n => { DeliveredDate = n.GetDateTimeOffsetValue(); } },
                { "distance", n => { Distance = n.GetDoubleValue(); } },
                { "division", n => { Division = n.GetStringValue(); } },
                { "enableValidations", n => { EnableValidations = n.GetBoolValue(); } },
                { "freightChargeTerms", n => { FreightChargeTerms = n.GetStringValue(); } },
                { "lineItems", n => { LineItems = n.GetCollectionOfObjectValues<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeLineItemRequest>(global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeLineItemRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "metadata", n => { Metadata = n.GetStringValue(); } },
                { "orderNumber", n => { OrderNumber = n.GetStringValue(); } },
                { "paymentTerms", n => { PaymentTerms = n.GetStringValue(); } },
                { "plannedShipmentWeight", n => { PlannedShipmentWeight = n.GetDoubleValue(); } },
                { "ratingEngineInfo", n => { RatingEngineInfo = n.GetStringValue(); } },
                { "referenceNumbers", n => { ReferenceNumbers = n.GetCollectionOfObjectValues<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeReferenceNumberRequest>(global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeReferenceNumberRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "shipDate", n => { ShipDate = n.GetDateTimeOffsetValue(); } },
                { "stops", n => { Stops = n.GetCollectionOfObjectValues<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeStopRequest>(global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeStopRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "transportationMode", n => { TransportationMode = n.GetStringValue(); } },
                { "transportationServiceLevel", n => { TransportationServiceLevel = n.GetStringValue(); } },
                { "transportationServiceType", n => { TransportationServiceType = n.GetStringValue(); } },
                { "uuid", n => { Uuid = n.GetGuidValue(); } },
                { "vendor", n => { Vendor = n.GetObjectValue<global::Navix.FreightAudit.Models.Vendor.Models.Requests.Integrations.VendorRequest>(global::Navix.FreightAudit.Models.Vendor.Models.Requests.Integrations.VendorRequest.CreateFromDiscriminatorValue); } },
                { "vendorCharges", n => { VendorCharges = n.GetCollectionOfObjectValues<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeChargeRequest>(global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeChargeRequest.CreateFromDiscriminatorValue)?.AsList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("actualShipmentWeight", ActualShipmentWeight);
            writer.WriteStringValue("billingTerm", BillingTerm);
            writer.WriteCollectionOfObjectValues<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeChargeRequest>("charges", Charges);
            writer.WriteDoubleValue("cubicMeter", CubicMeter);
            writer.WriteStringValue("currency", Currency);
            writer.WriteObjectValue<global::Navix.FreightAudit.Models.Customer.Api.Models.Requests.Integrations.CustomerRequest>("customer", Customer);
            writer.WriteDoubleValue("customerCharge", CustomerCharge);
            writer.WriteCollectionOfObjectValues<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeChargeRequest>("customerCharges", CustomerCharges);
            writer.WriteDateTimeOffsetValue("deliveredDate", DeliveredDate);
            writer.WriteStringValue("deliverTime", DeliverTime);
            writer.WriteDoubleValue("distance", Distance);
            writer.WriteStringValue("division", Division);
            writer.WriteBoolValue("enableValidations", EnableValidations);
            writer.WriteStringValue("freightChargeTerms", FreightChargeTerms);
            writer.WriteCollectionOfObjectValues<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeLineItemRequest>("lineItems", LineItems);
            writer.WriteStringValue("metadata", Metadata);
            writer.WriteStringValue("orderNumber", OrderNumber);
            writer.WriteStringValue("paymentTerms", PaymentTerms);
            writer.WriteDoubleValue("plannedShipmentWeight", PlannedShipmentWeight);
            writer.WriteStringValue("ratingEngineInfo", RatingEngineInfo);
            writer.WriteCollectionOfObjectValues<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeReferenceNumberRequest>("referenceNumbers", ReferenceNumbers);
            writer.WriteDateTimeOffsetValue("shipDate", ShipDate);
            writer.WriteCollectionOfObjectValues<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeStopRequest>("stops", Stops);
            writer.WriteStringValue("transportationMode", TransportationMode);
            writer.WriteStringValue("transportationServiceLevel", TransportationServiceLevel);
            writer.WriteStringValue("transportationServiceType", TransportationServiceType);
            writer.WriteGuidValue("uuid", Uuid);
            writer.WriteObjectValue<global::Navix.FreightAudit.Models.Vendor.Models.Requests.Integrations.VendorRequest>("vendor", Vendor);
            writer.WriteCollectionOfObjectValues<global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeChargeRequest>("vendorCharges", VendorCharges);
        }
    }
}
#pragma warning restore CS0618
