// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Navix.FreightAudit.Models.Order.Models.Integrations
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class OrderCompositeChargeRequest : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The charge property</summary>
        public double? Charge { get; set; }
        /// <summary>The chargeType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ChargeType { get; set; }
#nullable restore
#else
        public string ChargeType { get; set; }
#endif
        /// <summary>The chargeTypeUuid property</summary>
        public Guid? ChargeTypeUuid { get; set; }
        /// <summary>The code used by the tenant to identify a charge.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Code { get; set; }
#nullable restore
#else
        public string Code { get; set; }
#endif
        /// <summary>The currency property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>The currencyId property</summary>
        public int? CurrencyId { get; set; }
        /// <summary>The description used by the vendor to identify a charge.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The metaData property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MetaData { get; set; }
#nullable restore
#else
        public string MetaData { get; set; }
#endif
        /// <summary>The uuid property</summary>
        public Guid? Uuid { get; set; }
        /// <summary>The vendorId property</summary>
        public int? VendorId { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeChargeRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeChargeRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Navix.FreightAudit.Models.Order.Models.Integrations.OrderCompositeChargeRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "charge", n => { Charge = n.GetDoubleValue(); } },
                { "chargeType", n => { ChargeType = n.GetStringValue(); } },
                { "chargeTypeUuid", n => { ChargeTypeUuid = n.GetGuidValue(); } },
                { "code", n => { Code = n.GetStringValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "currencyId", n => { CurrencyId = n.GetIntValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "metaData", n => { MetaData = n.GetStringValue(); } },
                { "uuid", n => { Uuid = n.GetGuidValue(); } },
                { "vendorId", n => { VendorId = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("charge", Charge);
            writer.WriteStringValue("chargeType", ChargeType);
            writer.WriteGuidValue("chargeTypeUuid", ChargeTypeUuid);
            writer.WriteStringValue("code", Code);
            writer.WriteStringValue("currency", Currency);
            writer.WriteIntValue("currencyId", CurrencyId);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("metaData", MetaData);
            writer.WriteGuidValue("uuid", Uuid);
            writer.WriteIntValue("vendorId", VendorId);
        }
    }
}
#pragma warning restore CS0618
