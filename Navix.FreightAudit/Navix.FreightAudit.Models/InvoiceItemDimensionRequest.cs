// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Navix.FreightAudit.Models
{
    /// <summary>
    /// The physical dimensions of the Item
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class InvoiceItemDimensionRequest : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Height</summary>
        public double? Height { get; set; }
        /// <summary>Length</summary>
        public double? Length { get; set; }
        /// <summary>Indicates whether the Item is stackable</summary>
        public bool? Stackable { get; set; }
        /// <summary>The system of measurement. If the system is Imperial, all dimensions are in inches and pounds. If the system is Metric, all dimensions are in centimeters and kilograms. Defaults to &apos;Imperial&apos; when empty.</summary>
        public global::Navix.FreightAudit.Models.InvoiceItemDimensionRequest_system? System { get; set; }
        /// <summary>Volume</summary>
        public double? Volume { get; set; }
        /// <summary>Weight</summary>
        public double? Weight { get; set; }
        /// <summary>Width</summary>
        public double? Width { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Navix.FreightAudit.Models.InvoiceItemDimensionRequest"/> and sets the default values.
        /// </summary>
        public InvoiceItemDimensionRequest()
        {
            AdditionalData = new Dictionary<string, object>();
            System = global::Navix.FreightAudit.Models.InvoiceItemDimensionRequest_system.Imperial;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Navix.FreightAudit.Models.InvoiceItemDimensionRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Navix.FreightAudit.Models.InvoiceItemDimensionRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Navix.FreightAudit.Models.InvoiceItemDimensionRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "height", n => { Height = n.GetDoubleValue(); } },
                { "length", n => { Length = n.GetDoubleValue(); } },
                { "stackable", n => { Stackable = n.GetBoolValue(); } },
                { "system", n => { System = n.GetEnumValue<global::Navix.FreightAudit.Models.InvoiceItemDimensionRequest_system>(); } },
                { "volume", n => { Volume = n.GetDoubleValue(); } },
                { "weight", n => { Weight = n.GetDoubleValue(); } },
                { "width", n => { Width = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("height", Height);
            writer.WriteDoubleValue("length", Length);
            writer.WriteBoolValue("stackable", Stackable);
            writer.WriteEnumValue<global::Navix.FreightAudit.Models.InvoiceItemDimensionRequest_system>("system", System);
            writer.WriteDoubleValue("volume", Volume);
            writer.WriteDoubleValue("weight", Weight);
            writer.WriteDoubleValue("width", Width);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
