// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Navix.FreightAudit.Models
{
    /// <summary>
    /// The Order Customer
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class OrderCustomerRequest : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The billing terms for the Customer</summary>
        public global::Navix.FreightAudit.Models.OrderCustomerRequest_billingTerms? BillingTerms { get; set; }
        /// <summary>The list of Charge Codes</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Navix.FreightAudit.Models.OrderChargeRequest>? Charges { get; set; }
#nullable restore
#else
        public List<global::Navix.FreightAudit.Models.OrderChargeRequest> Charges { get; set; }
#endif
        /// <summary>The contact information of the Vendor</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Navix.FreightAudit.Models.OrderContactRequest? Contact { get; set; }
#nullable restore
#else
        public global::Navix.FreightAudit.Models.OrderContactRequest Contact { get; set; }
#endif
        /// <summary>The three character ISO 4217 code for the Customer Currency. Defaults to &apos;USD&apos; when empty.</summary>
        public global::Navix.FreightAudit.Models.OrderCustomerRequest_currency? Currency { get; set; }
        /// <summary>The Tenant&apos;s unique identifier for the Customer</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ExternalId { get; set; }
#nullable restore
#else
        public string ExternalId { get; set; }
#endif
        /// <summary>The Name of the Customer</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Navix.FreightAudit.Models.OrderCustomerRequest"/> and sets the default values.
        /// </summary>
        public OrderCustomerRequest()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Navix.FreightAudit.Models.OrderCustomerRequest"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Navix.FreightAudit.Models.OrderCustomerRequest CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Navix.FreightAudit.Models.OrderCustomerRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "billingTerms", n => { BillingTerms = n.GetEnumValue<global::Navix.FreightAudit.Models.OrderCustomerRequest_billingTerms>(); } },
                { "charges", n => { Charges = n.GetCollectionOfObjectValues<global::Navix.FreightAudit.Models.OrderChargeRequest>(global::Navix.FreightAudit.Models.OrderChargeRequest.CreateFromDiscriminatorValue)?.AsList(); } },
                { "contact", n => { Contact = n.GetObjectValue<global::Navix.FreightAudit.Models.OrderContactRequest>(global::Navix.FreightAudit.Models.OrderContactRequest.CreateFromDiscriminatorValue); } },
                { "currency", n => { Currency = n.GetEnumValue<global::Navix.FreightAudit.Models.OrderCustomerRequest_currency>(); } },
                { "externalId", n => { ExternalId = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<global::Navix.FreightAudit.Models.OrderCustomerRequest_billingTerms>("billingTerms", BillingTerms);
            writer.WriteCollectionOfObjectValues<global::Navix.FreightAudit.Models.OrderChargeRequest>("charges", Charges);
            writer.WriteObjectValue<global::Navix.FreightAudit.Models.OrderContactRequest>("contact", Contact);
            writer.WriteEnumValue<global::Navix.FreightAudit.Models.OrderCustomerRequest_currency>("currency", Currency);
            writer.WriteStringValue("externalId", ExternalId);
            writer.WriteStringValue("name", Name);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
