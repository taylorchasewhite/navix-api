{
  "openapi": "3.0.0",
  "info": {
    "title": "Navix Public API",
    "version": "v1-v2",
    "description": "# Getting Started\n\nTo begin working with the Navix API, you'll need the following. Your Navix customer success manager will provide you with these details:\n* __Tenant UUID__. We generally set up both a production tenant and a sandbox tenant. We'll send you the UUIDs for both the production and sandbox tenant.\n* __User account__. You can use this account to log in to the Navix UI to help test your API interactions.\n* __API key__. We’ll send you an API key used to authenticate.\n\n# Authentication\n\nEvery API request should include an `X-Tenant-Uuid` header that contains your Tenant UUID and an `X-Api-Key` header containing your API key.\n\n# API Versions\n\nOur APIs are generally broken into three categories:\n* __v1__: This is the original version of our API. We plan to continue supporting it without breaking changes, but most new development will occur on v2.\n* __v2__: This introduced several improvements to our API, but also introduced some breaking changes. The major change is that it supports multiple vendors and multiple invoices on a single order. We're committed to stability on these endpoints, we support them and won't make breaking changes to them.\n* __Provisional__: We want to make sure our customers always have access to the latest features we're building. Our provisional endpoints provide a glimpse into the latest and greatest. However, these endpoints are not generally available and should not be used without explicit authorization for your Navix account team.\n\n> &#x26a0;&#xfe0f; **Provisional Endpoints Support**\n>\n> Do not use provisional endpoints unless you've been explicitly authorized to use them by your Navix account team. Outside of authorized, tenant-specific use cases, we will not provide support for these endpoints, and their use could have unintended side effects.\n\nNote that additive changes to an endpoint are not considered breaking. For instance, adding a new property to an endpoint isn't considered breaking, since the API consumer should ignore unknown properties by default. Likewise, it's important for API consumers not to send any data that isn't documented here. Although we ignore unrecognized fields, sending an unsupported property could cause a conflict if we later add a new property with that name.\n\n# Synchronous and Asynchronous Endpoints\n\nNote that some of our API endpoints operate asynchronously and may not be instantaneous. There are a number of reasons for this. Usually, these operations end up in a queue, providing greater resiliency. Sometimes, there's a multiple step workflow that takes a bit of time to run. Either way, we want our endpoint to validate the request and quickly return a response indicating if there are any errors.\n\nFollowing RESTful best practices, our asynchronous endpoints return a `202 Accepted` response, rather than a `200 OK`. For instance, when creating an order (with `POST /v2/orders`), several validations are run; if any of them fail, a `400 Bad Request` is returned with additional detail on which validations failed. If the POSTed data is valid, a `202 Accepted` is returned, which indicates the order will be added to our queue of orders to import. The order may not immediately appear within other API requests or within the UI. Usually, these asynchronous operations run within seconds; occasionally, such as during usage spikes, it may take longer.\n\n# Glossary\n\nBelow are some terms (__in bold__) that have specific meaning in Navix, listed with some synonyms commonly used in the industry.\n* __Tenant__: You, a Navix customer; likely a broker or 3PL\n* __Order__: Load, shipment, movement\n* __Invoice__: Vendor bill, carrier invoice, AP invoice, vendor invoice\n* __Vendor__: Carrier, warehouse, anyone that you pay\n* __Customer__: Shipper, freight forwarder, anyone that pays you\n* __Document__: Anything sent from your vendor; could be: invoice, bill of lading, delivery receipts, packing slips, etc\n\nSome additional terms used in this document:\n* __Approved Invoice__: An invoice that has been audited and approved for payment.\n* __Terminated Invoice__: An invoice that has been rejected for payment.\n* __Finalized Invoice__: An invoice that has been audited and is either \"approved\" or \"terminated\".\n\n# Common Flows\n\nThe primary consumers of this API are tenant's TMS integrations (or the TMS itself). Throughout this section, we refer to \"TMS\" (Transportation Management System) -- but this could be any consumer of the Navix API.\n\nNavix's API is flexible, and there are multiple ways a TMS can integrate with it. This section focuses on the most common scenarios.\n\nA simple TMS integration has two integration points with Navix:\n* TMS pushes orders to Navix.\n* TMS pulls completed audits from Navix.\n\n![Simple Integration Flow](https://docs.navix.io/assets/flow-1.png)\n\nA more complex integration may have several integration points with Navix:\n* TMS pushes orders to Navix.\n* TMS pushes invoices to Navix.\n* TMS pushes supporting documents to Navix.\n* Navix calls the TMS rating engine.\n* TMS pulls completed audits from Navix.\n* TMS pulls supporting documents from Navix.\n* TMS pulls dispute data and communications from Navix.\n\n![More Complex Integration Flow](https://docs.navix.io/assets/flow-2.png)\n\nIt's worth noting that there may be data (usually invoices and supporting documents) that are being sent to Navix without going through the TMS. For instance, vendors (carriers) may be sending EDI 210 documents directly to Navix. Vendors may also be sending invoices and supporting documents via email.\n\n## TMS Pushes Orders to Navix\n\nIn order to audit an invoice in Navix, Navix needs to know what order the invoice is for.\n\nUse the [\"Create an order\" (V2) endpoint](#tag/API-v2_Orders/operation/Order) to push an order to Navix.\n\nWe recommend:\n* The TMS should push order data to Navix regularly.\n* This could happen on a scheduled basis (perhaps every 15 minutes or every hour).\n* It can also happen in real-time (whenever a load/order is changed in the TMS).\n* Only orders that have been changed should be pushed to Navix.\n* Push orders to Navix after they have been tendered to a carrier, before the point in time when Navix may start receiving invoices.\n* You can push an order to Navix multiple times. Navix will perform an upsert based on the `orderNumber`. That is, if you push an order to Navix, if there's an existing order with the same `orderNumber`, it will be updated instead of inserted.\n* Send an `externalId` that correlates to the unique identifier for the order in the TMS.\n\nWe recommend against:\n* Sending all open orders on a scheduled basis. (For instance, sending all tendered orders every hour, regardless of whether or not anything has been changed on the order.)\n* Storing or relying on order UUIDs. An order UUID refers to a specific version of the order data; subsequent updates/upserts will result in new order UUIDs.\n* Assuming the order will be ingested immediately. Order ingestion generally occurs in near real-time. However, due to the resilient and distributed nature of our system, ingestion can occasionally take longer.\n\n## TMS Pulls Completed Audits from Navix\n\nWhen an audit has been completed (either by a user or automatically by Navix), the TMS needs to know the results of the audit.\n\nThere are two ways to manage this:\n* __Polling__: On a scheduled basis, the TMS polls the Navix API for any invoices that have been approved since the last polling.\n* __Webhook__: Whenever an invoice is approved, Navix will call a webhook callback on an API hosted by the TMS.\n\nEither way, the only data the TMS gets from either polling or a webhook is the UUID of an invoice that's been approved. The next step is to get the audit results.\n\n### Polling\n\nUse the [\"List finalized invoices\" endpoint](#tag/API-v1_Invoices/operation/ListFinalizedInvoices) to get a list of invoices finalized during a given time period.\n\nNotes:\n* The results are paged. More than one page of results may be returned; be sure to check to see if there are additional pages.\n* It's the responsibility of the TMS to keep track of the last time polling was run, and to set the `StartTime` and `EndTime` accordingly. If the TMS misses a scheduled run, the next poll request should adjust the `StartTime` accordingly.\n* Note that the `StartTime` and `EndTime` are UTC, and are the times stored by Navix. We recommend planning for a small amount of \"clock drift\" -- that is, the time on your server might vary slightly from the times on Navix servers. So if you're running this process at 6:00:00 UTC, it might make sense to specify an `EndTime` of 5:59:00 UTC.\n* You can poll with whatever frequency you want. Most tenants find that polling every 10-15 minutes strikes a good balance between returning results quickly and avoiding an overly \"chatty\" integration.\n\n### Webhook\n\nUse the [`INVOICE_APPROVED` webhook](#tag/API-v2_Webhooks) to receive a webhook callback whenever an invoice is approved.\n\nNotes:\n* Webhooks are triggered in real-time. So as soon as an invoice is approved, your callback URL will be immediately hit.\n* It's the responsibility of the TMS to handle the volume or fail in a prescribed fashion. Invoices are often approved in bulk, so there could be dozens, hundreds, or even thousands of webhook callbacks triggered in a very short period of time. Review the section on [webhook delivery guarantees](#tag/API-v2_Webhooks/Delivery-Guarantees) for more details on how Navix will retry webhooks.\n* Depending on the reliability of the TMS, it may be beneficial to supplement webhooks with occasional polling. That is, if there's a chance that the callback may fail or the TMS may miss some webhooks, the polling endpoint can be used to verify if any webhooks failed.\n\n### Getting Audit Results\n\nOnce you've received the UUID of an approved invoice, either by polling or webhook, use the [\"Get audit result\" endpoint](#tag/API-v2_Invoices/operation/GetAuditResult) to get the results of an audit.\n\nNotes:\n* Make sure to use the latest (v2) version of the [\"Get audit result\" endpoint](#tag/API-v2_Invoices/operation/GetAuditResult).\n* If you're pulling approved documents for pre-billing (in addition to getting audit results), you may end up with duplicate documents. That is, the documents you receive from the [\"Get List of Approved Documents\" endpoint](#tag/Provisional_Documents/operation/GetApprovedDocuments) or the `DOCUMENT_APPROVED` webhook will also appear in the [\"Get audit result\" endpoint](#tag/API-v2_Invoices/operation/GetAuditResult). However, you can specify `includeApprovedDocuments=false` in the call to the \"Get audit result\" endpoint to filter out approved documents from the list of documents that appears in `orders[n].documents`.\n\n## TMS Pulls Supporting Documents from Navix\n\n### Getting Documents by Invoice UUID\n\nAfter the TMS has pulled audit results for an invoice, it can retrieve the supporting documents for the invoice. Use the [\"Download invoice document\" endpoint](#tag/API-v1_Documents/operation/DownloadInvoiceDocument) to download the raw file.\n\nNotes:\n* The endpoint requires an invoice UUID and a document UUID. Document UUIDs are returned in the \"Get audit result\" endpoint, under `orders.documents.uuid`.\n* Additional information about the document is available from the \"Get result endpoint\", such as the type of document (\"Invoice\", \"Bill of Lading\", etc.).\n* The endpoint returns the raw binary file.\n* Currently, all returned files will be in PDF format. However, this may change in the future, and API consumers should not assume that the returned files will always be PDFs.\n\n## TMS Pulls Pre-Bill Approved Orders from Navix\n\nPre-billing sends \"approved\" orders to the TMS before receiving or completing the audit of an invoice. This indicates that the TMS can generate a customer invoice for the order. Usually, the approval occurs when a proof of delivery is received and approved by an auditor.\n\nThere are two ways to implement this:\n* __Polling__: On a scheduled basis, the TMS polls the Navix API for any approved orders.\n* __Webhook__: Whenever an order is approved, Navix will call a webhook callback on an API hosted by the TMS.\n\nEither way, the only data the TMS gets from either polling or a webhook is the external ID of the order.\n\n### Polling\n\nTo get a list of approved orders, call the [Get List of Approved Orders](#tag/Provisional_Orders/operation/GetApprovedOrders) endpoint. This endpoint lets you pass in a time range, and returns the UUIDs of all orders approved during that period.\n\n### Webhook\n\nUse the [`ORDER_APPROVED` webhook](#tag/API-v2_Webhooks) to receive a webhook callback whenever an order is approved.\n\n### Getting Order Documents\n\nOnce an order has been approved (and the TMS learns about it from either polling or a webhook callback), it can retrieve additional information about the documents on the order:\n\n* You can retrieve a list of all the documents on the order with the [Get Document Uuids](#tag/Provisional_Documents/operation/DocumentUuidsGet) endpoint. This returns a list of document UUIDs.\n* Alternatively, you can retrieve a list of documents with additional metadata, such as document type, by calling the [Get Document Metadata](#tag/Provisional_Documents/operation/DocumentMetatadataGet) endpoint.\n* You can download the binary file of a document using the [Get One Attachment](#tag/Provisional_Documents/operation/GetDocumentAttachment) endpoint. Currently, all returned files are in PDF format. However, this may change in the future, so API consumers should not assume that all returned files will always be PDFs.\n\n## TMS Pulls Approved Documents from Navix\n\nWhen a document is approved, it indicates that the TMS can send the document to the customer/shipper. This can occur before the invoice is received or audited.\n\nThere are two ways to implement this:\n* __Polling__: On a scheduled basis, the TMS polls the Navix API for any approved documents.\n* __Webhook__: Whenever a document is approved, Navix will call a webhook callback on an API hosted by the TMS.\n\nEither way, the only data the TMS gets from either polling or a webhook is the external ID of the order and the document UUID.\n\n### Polling\n\nTo get a list of approved documents, call the [Get List of Approved Documents](#tag/Provisional_Documents/operation/GetApprovedDocuments) endpoint. This endpoints lets you pass in a time range, and returns the external order ID and document UUID of all documents approved during that period.\n\n### Webhook\n\nUse the [`DOCUMENT_APPROVED` webhook](#tag/API-v2_Webhooks) to receive a webhook callback whenever a document is approved.\n\n### Getting Documents\n\nOnce a document has been approved (and the TMS learns about it from either polling or a webhook callback), you can get the binary file with the [Get One Attachment](#tag/Provisional_Documents/operation/GetDocumentAttachment) endpoint. Currently, all returned files are in PDF format. However, this may change in the future, so API consumers should not assume that all returned files will always be PDFs.\n\nNotes:\n* An approved document will also match to an invoice once the invoice for the order has been received. This means approved documents will also be returned in the [\"Get audit result\" endpoint](#tag/API-v2_Invoices/operation/GetAuditResult). To filter approved documents out from that endpoint, include the `includeApprovedDocuments=false` parameter when calling [\"Get audit result\"](#tag/API-v2_Invoices/operation/GetAuditResult).\n",
    "x-logo": {
      "url": "https://docs.navix.io/assets/navix-logo.png"
    }
  },
  "servers": [
    {
      "url": "https://api.navix.io"
    }
  ],
  "tags": [
    {
      "name": "API v1_Orders",
      "x-displayName": "Orders"
    },
    {
      "name": "API v1_Invoices",
      "x-displayName": "Invoices"
    },
    {
      "name": "API v1_Documents",
      "x-displayName": "Documents"
    },
    {
      "name": "API v2_Invoices",
      "x-displayName": "Invoices"
    },
    {
      "name": "API v2_Orders",
      "x-displayName": "Orders"
    },
    {
      "name": "API v2_Disputes",
      "x-displayName": "Disputes"
    },
    {
      "name": "API v2_Webhooks",
      "description": "A webhook is a callback mechanism that causes Navix to make an API request to a consumer system when events occur within Navix.\n\nOur webhooks are \"thin\". That is, they're lightweight and usually contain IDs that can be used to retreive additional data via API.\n\n## Webhook Callback Payload\n\nAll webhooks have the same payload structure as this example:\n```\n{\n\t\"id\": \"00000000-0000-0000-0000-000000000000\",\n\t\"type\": \"DISPUTE_CREATED\",\n\t\"time\": \"2025-01-01T12:00:00.000000\",\n\t\"data\": \"\\{ \\\"invoiceUuid\\\": \\\"<uuid>\\\" \\}\"\n}\n```\n\n* `id` is a unique identifier for the event. Note that this is _not_ the identifier for the object (invoice, dispute, etc.) which triggered the event.\n* `type` is the specific type of event that triggered the webhook. Possible values include:\n  * `INVOICE_CREATED`\n  * `INVOICE_APPROVED`\n  * `DISPUTE_CREATED`\n  * `DISPUTE_UPDATED`\n  * `DISPUTE_COMMUNICATION_CREATED`\n  * `ORDER_APPROVED`\n  * `DOCUMENT_APPROVED`\n* `time` is the UTC time of when the event occurred.\n* `data` contains a JSON object with details for the event. The specific data varies depending on the type of event that occurred. Note that the JSON has been escaped.\n\n## Delivery Guarantees\n\nThe webhook consumer should return a status code between 200 and 299 (inclusive) within about 20 seconds.\n\nIf the consumer is unreachable, doesn't respond promptly, or returns a status code less than 200 or greater than 299, we will consider the delivery attempt failed and will make another attempt.\n\nWe use an exponential backoff algorithm to determine the time between delivery attempts, starting at a few seconds and increasing to a maximum of 1 hour.  We will continue to attempt delivery for 8 hours beyond the initial attempt, after which the message will be discarded.\n\nWe aim for at-least-once delivery, so a single event may hit the webhook receiver multiple times. When that occurs, the `id` will be the same across the multiple requests, so it can be used as an idempotency key by consumers.\n\nWe cannot guarantee that webhooks will arrive in order. That is, if a dispute is updated twice, the webhook for the second update could arrive before the first. If that's likely to cause issues, we recommend recording the `time` field on the webhook and comparing that stored time to the time on any received webhook.\n\n## Event Types\n\n### `INVOICE_CREATED`\n\nThis event is raised whenever an invoice is created.\n\n#### `data` object\n\n```\n{\n  \"invoiceUuid\": \"00000000-0000-0000-0000-000000000000\"\n}\n```\n\n* `invoiceUuid` is the identifier for the invoice which was created.\n\n### `INVOICE_APPROVED`\n\nThis event is raised whenever an invoice is approved. Note that this is only raised for approvals, not for terminated invoices.\n\n#### `data` object\n\n```\n{\n  \"invoiceUuid\": \"00000000-0000-0000-0000-000000000000\"\n}\n```\n\n* `invoiceUuid` is the identifier for the invoice which was approved.\n\n### `DISPUTE_CREATED`\n\nThis event is raised whenever a new dispute is created.\n\n#### `data` object\n\n```\n{\n  \"invoiceUuid\": \"00000000-0000-0000-0000-000000000000\",\n  \"disputeUuid\": \"00000000-0000-0000-0000-000000000000\"\n}\n```\n\n* `invoiceUuid` is the identifier for the invoice on which the dispute was created.\n* `disputeUuid` is the identifier for the newly created dispute.\n\n### `DISPUTE_UPDATED`\n\nThis event is raised whenever a dispute is updated. Note that creating and updating are separate events, so this event isn't raised when the dispute is initially created.\n\n#### `data` object\n\n```\n{\n  \"invoiceUuid\": \"00000000-0000-0000-0000-000000000000\",\n  \"disputeUuid\": \"00000000-0000-0000-0000-000000000000\"\n}\n```\n\n* `invoiceUuid` is the identifier for the invoice associated with the dispute that was updated.\n* `disputeUuid` is the identifier for the updated dispute.\n\n### `DISPUTE_COMMUNICATION_CREATED`\n\nThis event is raised whenever a new communication is created on a dispute.\n\nCommunications are immutable, so there's no corresponding webhook for updates to a communication.\n\nNote that whenever a dispute is created, an initial communication is usually created at the same time. It's possible the `DISPUTE_COMMUNICATION_CREATED` webhook will arrive before the `DISPUTE_CREATED` webhook.\n\n#### `data` object\n\n```\n{\n  \"invoiceUuid\": \"00000000-0000-0000-0000-000000000000\",\n  \"disputeUuid\": \"00000000-0000-0000-0000-000000000000\",\n  \"communicationUuid\": \"00000000-0000-0000-0000-000000000000\"\n}\n```\n\n* `invoiceUuid` is the identifier for the invoice associated with the dispute.\n* `disputeUuid` is the identifier for the dispute.\n* `communicationUuid` is the identifier for the created communication.\n\n### `ORDER_APPROVED`\n\nThis event is raised whenever an order is approved.\n\n#### `data` object\n\n```\n{\n  \"orderExternalId\": \"ORD_123\"\n}\n```\n\n* `orderExternalId` is the order Id as stored in the tenant system outside of Navix.\n\n### `DOCUMENT_APPROVED`\n\nThis event is raised whenever an\\ document is approved.\n\n#### `data` object\n\n```\n{\n  \"orderExternalId\": \"ORD_123\",\n  \"documentUuid\": \"00000000-0000-0000-0000-000000000000\"\n}\n```\n\n* `documentUuid` is the identifier for the document as stored in Navix.\n* `orderExternalId` is the order Id as stored in the tenant system outside of Navix.",
      "x-displayName": "Webhooks"
    },
    {
      "name": "Provisional_Orders",
      "x-displayName": "Orders"
    },
    {
      "name": "Provisional_Documents",
      "x-displayName": "Documents"
    },
    {
      "name": "Provisional_Rating Engine",
      "description": "Navix provides the ability to call out to an endpoint in your system that can utilize your rating engine. Our system will allow an auditor to send an updated invoice from our system to your rating engine endpoint to get rated.\n\n## Delivery Guarantees\n\nThis is a webhook in the Navix system but it does not have the same guarantees as the other webhooks.\n\nWe will attempt to call your rating engine endpoint 1 time. If it fails to return a 2xx status code, we might try again based on the status code that was returned. We won't retry 4xx status codes but we may retry 5xx status codes.\n\nIn other words, calls to your rating engine webhook are managed in a different manner than other tenant provided webhooks. The mechanism, manner and guarantees of this webhook are different from the [Webhooks](index.html#tag/API-v2_Webhooks) tab mentioned earlier in the documentation.\n\n## Performance Concerns\n\nIt is important that performance is taken into account inside of rating engines. An auditor in the UI can call the rating engine with the press of a button. If a rating engine takes 15 seconds to complete, each audit will take an additional 15 seconds to complete with each rating engine call.\n\n## Setup\n\nGetting started is straight forward. Our team and your team have a few tasks that need to be accomplished so you use this feature.\n\n### Implementation Responsibilities\n\nOur system will make a call out to an endpoint url that you specify. That endpoint will need to handle the payload that we send, rate the payload and then return a response. You can view request payload and response structure in the `Rating Engine Payload` and `Rating Engine Response` sections below respectively. We do into more detail in the `Endpoint Contract` section\n\nHere are the tasks for your team:\n\n1. Create an endpoint that satisfies the information found in the `Endpoint Contract` section\n1. Provide the url to that endpoint to the Navix team\n1. Contact your account manager so our team can generate a unique api key for you. This api key is the one all our requests will use so you can be sure that the requests are coming from our system. How it is used is covered in the `Endpoint Contract` section.\n\nHere are the tasks for the Navix team:\n\n1. Provide you with a unique api key so you can be sure the requests are coming from us.\n1. Add your endpoint url to our system so we can contact you.\n1. Support you.\n\n## Endpoint Contract\n\nIn order for the Navix system to contact your rating engine we need an endpoint that meets the following requirements:\n\n1. The endpoint must be able to handle a `POST` request.\n1. The endpoint must handle an `apikey` query string argument. The `apikey` value is one that our team has generated for you. You can get this by contacting your account manager. Your endpoint should validate that the `apikey` value is the same that we provided you. If it is not, you should return a `401 Unauthorized` status code.\n1. The endpoint must handle the request payload. The request payload is an invoice from our system that needs to be rated. You can learn more about the payload and what each field means in the `Rating Engine Payload` section below.\n1. The endpoint must map your system's raw rating response to the rating engine response that we are expecting. You can view that structure in the `Rating Engine Response` section below.\n1. The endpoint must return a 2xx response along with the structure provided in the `Rating Engine Response` section below. Please note that we are expecting a single rating engine response from your endpoint. You might have a rating engine that rate shops multiple vendors, please trim down your response to only include the selected vendor response. If your rating engine throws an exception, it is beneficial to the auditor to return a 2xx response and populate the `RawResponse` field with the exception. These exceptions provides feedback to the auditors so they can make corrections or let them know that a system is temporarily down.\n\nIf the endpoint returns a 2xx response we mark that as a success. All other responses are treated as failures and retry attempts happen where it makes sense.\n\nWe can visualize the contract the following way:\n\n![Endpoint Contract Flow](https://docs.navix.io/assets/rating-engine-endpoint-contract-flow.png)\n\n### Rating Engine Payload\n\nOur payload is an invoice from our system. We have provided an example below to show the structure and a sample of data. An explanation of the fields is below the example.\n```\n{\n  \"Uuid\": \"e4c3b17a-d207-43f9-ba2d-f61d068c7808\",\n  \"ExternalOrderId\": \"MyOrderId\",\n  \"FreightChargeTerms\": \"Prepaid\",\n  \"DeliveryDate\": \"2024-04-11T12:34:56Z\",\n  \"ShipDate\": \"2024-04-01T08:00:00Z\",\n  \"Vendor\": {\n    \"ExternalId\": \"147-888\",\n    \"SCAC\": \"SAIA\"\n  },\n  \"Customer\": {\n  {\n    \"ExternalId\": \"6594HH4\",\n  },\n  \"Stops\": [\n    {\n      \"Type\": \"Origin\",\n      \"City\": \"Beverly Hills\",\n      \"Zip\": \"90210\",\n      \"CountryCode\": \"USA\",\n      \"StateCode\": \"CA\"\n    },\n    {\n      \"Type\": \"Destination\",\n      \"City\": \"Dallas\",\n      \"Zip\": \"75080\",\n      \"CountryCode\": \"USA\",\n      \"StateCode\": \"TX\"\n    }\n  ],\n  \"LineItems\": [\n    {\n      \"Description\": \"Navix branded shoes\",\n      \"HandlingUnit\": \"Pallet\",\n      \"HandlingUnitCode\": \"PLT\",\n      \"HandlingUnitCount\": 4,\n      \"Weight\": 231.1,\n      \"WeightUnit\": \"Imperial\",\n      \"Class\": 100\n    }\n  ],\n  \"VendorCharges\": [\n    {\n      \"Code\": \"ACH\"\n    }\n  ]\n}\n```\n\n* `Uuid` is a unique identifier for the invoice in the Navix system.\n* `ExternalOrderId` is the order id in your system that this invoice is for.\n* `FreightChargeTerms` is how the freight is paid. Possible values include: Collect, Prepaid, PrepaidAdd and ThirdParty\n* `DeliveryDate` is the UTC datetime of when the shipment was delivered.\n* `ShipDate` is the UTC datetime of when the shipment was shipped.\n* `Vendor`\n  * `ExternalId` is the id in your system that this vendor is known as.\n  * `SCAC` is the SCAC code for this vendor.\n* `Customer`\n  * `ExternalId` is the id in your system that this customer is known as.\n* `Stops`\n  * `Stops.Type` is what type of stop this is. Possible values include: Origin, Destination and BillTo.\n  * `Stops.City` is city for this stop.\n  * `Stops.Zip` is the zip code for this stop.\n  * `Stops.CountryCode` is the country code for this stop. Possible values include: USA, CAN and MEX.\n  * `Stops.StateCode` is the state code for this stop.\n* `LineItems`\n  * `LineItems.Description` is the description for this line item.\n  * `LineItems.HandlingUnit` is the container for this line item. Possible values include: Pallet, Drum, Bag, Barrels, Crates, Bundles, Piece, Loose, Boxes, Cases, Carton and Totes.\n  * `LineItems.HandlingUnitCode` is the alias for the HandlingUnit above.\n  * `LineItems.HandlingUnitCount` is how many containers are used for this line item\n  * `LineItems.Weight` is the weight for this line item.\n  * `LineItems.WeightUnit` is the weight system used for this line item. Possible values include: Imperial and Metric\n  * `LineItems.Class` is the shipping class.\n* `VendorCharges`\n  * `Code` the charge code in your system for this charge.\n\n### Rating Engine Response\n\nOnce the invoice has been rated, we need the results mapped in a format our system can understand. Please note that we are expecting a single rating engine response from your endpoint. You might have a rating engine that rate shops multiple vendors, please trim down your response to only include the selected vendor response.\n\nWe have provided an example below to show the structure and a sample of data. An explanation of the fields is below the example.\n```\n{\n  \"RawResponse\": \"...\",\n  \"RawResponseType\": \"JSON\",\n  \"VendorCharges\": [\n    {\n      \"Code\": \"ACH\",\n      \"Description\": \"LIMITED ACCESS DELIVERY\",\n      \"Amount\": 53.35\n    }\n  ],\n  \"CustomerCharges\": [\n    {\n      \"Code\": \"ACH\",\n      \"Description\": \"LIMITED ACCESS DELIVERY\",\n      \"Amount\": 59.35\n    }\n  ] \n}\n```\n\n* `RawResponse` is a raw response from your rating engine. This can be the response when a rate was returned or in the case where there was an exception from the rating engine. Providing this can be beneficial to auditors. Auditors will have the visibility to see this response in the UI.\n* `RawResponseType` is format of the `RawResponse` field. Possible values include: Json, Xml and Text.\n* `VendorCharges`\n  * `Code` the charge code in your system for this charge.\n  * `Description` is a description of the charge.\n  * `Amount` is the amount for this charge.\n* `CustomerCharges`\n  * `Code` is the as `VendorCharges.Code` above.\n  * `Description` is the as `VendorCharges.Description` above.\n  * `Amount` is the as `VendorCharges.Amount` above but relevant to a customer.",
      "x-displayName": "Rating Engine"
    }
  ],
  "paths": {
    "/integration/v1/api/tenants/{tenantUuid}/composite-orders": {
      "post": {
        "tags": [
          "API v1_Orders"
        ],
        "summary": "Create a new order",
        "description": "This endpoint is deprecated. Use the \"Create an Order\" endpoint listed under \"API V2\" instead.\r\n\r\nThis endpoint will always create a new composite order - it is not idempotent. If an existing Order with the same Order Number is found, it will be replaced with the new one. In the case the existing order is matched to an invoice, it will also be replaced, given that the invoice has not been approved yet.\r\n\r\nThe `enableValidations` property on the request body is used to determine whether or not to perform validations on the order. If validations are performed, any bad data will result in an error being returned; if validation are disabled, just about any data will be accepted. The validated fields include:\r\n* Transportation Mode\r\n* Transportation Service Level\r\n* Transportation Service Type\r\n* Currency\r\n* Billing Term\r\n* Customer\r\n* Vendor\r\n* Reference Number Type\r\n* Handling Unit\r\n* Charge Type",
        "parameters": [
          {
            "name": "tenantUuid",
            "in": "path",
            "description": "The UUID of the tenant who owns the composite order",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order.Models.Integrations.OrderCompositeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/integration/v1/api/tenants/{tenantUuid}/composite-vendor-invoices/{vendorInvoiceUuid}/result": {
      "get": {
        "tags": [
          "API v1_Invoices"
        ],
        "summary": "Get audit result",
        "description": "Get the results of an audit of a single invoice. This endpoint has been deprecated. A newer version is listed under 'API V2'.",
        "parameters": [
          {
            "name": "tenantUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "vendorInvoiceUuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResult"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true,
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/integration/v1/api/tenants/{tenantUuid}/composite-vendor-invoices/finalized": {
      "get": {
        "tags": [
          "API v1_Invoices"
        ],
        "summary": "List finalized invoices",
        "description": "Retrieves a paginated list containing the unique identifier (UUID) of each of the vendor invoices finalized between the specified `StartTime` and `EndTime`. This\r\nendpoint is intended to be polled on a regular basis.",
        "operationId": "ListFinalizedInvoices",
        "parameters": [
          {
            "name": "tenantUuid",
            "in": "path",
            "description": "The UUID of the tenant who owns the finalized Vendor Invoices",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "StartTime",
            "in": "query",
            "description": "Start time range to find Vendor Invoices which have finalized after this start time. \r\nThis start time is exclusive.\r\nStart time time zone is interpreted as UTC.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndTime",
            "in": "query",
            "description": "End time range to find Vendor Invoices which have finalized before this start time. \r\nThis start time is inclusive. \r\nDefault: Present time.\r\nEnd time time zone is interpreted as UTC.",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "SortOrder",
            "in": "query",
            "description": "Sort order applied to the finalization time. \r\nValues: ASC, DESC. \r\nDefault value is DESC",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Number of records per page. \r\nDefault value is 20, maximum value is 100",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "description": "Page index of the records to return. \r\nFirst page and default value is 0",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ResultsDelivered",
            "in": "query",
            "description": "Flag filter to return only Finalized Invoices which have been delivered or not.\r\nIf this flag is not set, then the filter is not applied.\r\nValues: true, false, Null.\r\nDefault value is Null",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Finalized Vendor Invoices successfully retrieved.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice.Models.Responses.FinalizedInvoicePaginationResponse"
                }
              }
            }
          },
          "400": {
            "description": "List of errors from invalid parameters."
          },
          "403": {
            "description": "Forbidden if the user does not have read permission."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/integration/v1/api/tenants/{tenantUuid}/vendor-invoices/{vendorInvoiceUuid}/documents/{documentUuid}/download": {
      "get": {
        "tags": [
          "API v1_Documents"
        ],
        "summary": "Download invoice document",
        "description": "Returns the raw binary file of a document associated with an invoice. The `Content-Type` header will contain the MIME type of the file, such as `application/pdf`. The\r\n`Content-Disposition` header will contain the original name of the file (such as the filename in the email that was sent to Navix).\r\n\r\nThis is intended to be used after a call to the \"Get Audit Result\" endpoint. The UUIDs for documents can be found in the returned payload from \"Get Audit Results\", under\r\n`orders.documents`.",
        "operationId": "DownloadInvoiceDocument",
        "parameters": [
          {
            "name": "tenantUuid",
            "in": "path",
            "description": "The UUID of the tenant who owns the vendor invoices",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "vendorInvoiceUuid",
            "in": "path",
            "description": "The UUID of the vendor invoice who owns the document",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentUuid",
            "in": "path",
            "description": "The UUID of the vendor invoice document",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Complete data stream of the file contents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "UUID is not found."
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/integration/v{version}/api/tenants/{tenantUuid}/invoices/{invoiceUuid}/statuses/terminated": {
      "post": {
        "tags": [
          "API v1_Invoices"
        ],
        "summary": "Terminate an invoice",
        "description": "This endpoint terminates an invoice. Once an invoice is terminated, it can no longer be audited or approved.",
        "parameters": [
          {
            "name": "tenantUuid",
            "in": "path",
            "description": "The UUID of the tenant who owns the Vendor Invoices",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "invoiceUuid",
            "in": "path",
            "description": "The UUID of the Vendor Invoice",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/integration/v2/api/tenants/{tenantUuid}/composite-vendor-invoices/{vendorInvoiceUuid}/result": {
      "get": {
        "tags": [
          "API v2_Invoices"
        ],
        "summary": "Get audit result",
        "description": "Get the results of an audit of a single invoice.\r\n\r\nThis is intended to be called after either:\r\n* A call to the 'List of finalized invoices' endpoint, or\r\n* Receiving a `INVOICE_APPROVED` webhook callback\r\n\r\nNote that this endpoint will return audit results for any finalized invoice, whether approved or terminated, but will return a 404 for any invoices that are still being audited.",
        "operationId": "GetAuditResult",
        "parameters": [
          {
            "name": "tenantUuid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "vendorInvoiceUuid",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "includeApprovedDocuments",
            "in": "query",
            "description": "",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultV2"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Microsoft.AspNetCore.Mvc.ProblemDetails"
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/v2/orders": {
      "post": {
        "tags": [
          "API v2_Orders"
        ],
        "summary": "Create an order",
        "description": "This creates a new order.\n\nThe endpoint validates the order, and returns a 400 if there's any invalid data being passed. A 202 response indicates the message has been durably stored and entered a highly-resilient workflow, and API consumers can assume the order will be successfully ingested.",
        "operationId": "Order",
        "parameters": [
          {
            "name": "X-Idempotency-Key",
            "in": "header",
            "description": "(Optional) Provide an X-Idempotency-Key to safely retry the request without accidentally performing the same operation twice.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-Uuid",
            "in": "header",
            "description": "(Required) Your tenant UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "(Required) The Order to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/orderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "externalId of the created Order",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/orderAcceptedResponse"
                }
              }
            },
            "x-ms-summary": "externalId of the created Order"
          },
          "400": {
            "description": "A detailed description of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequestResponse"
                }
              }
            },
            "x-ms-summary": "Order Invoice"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/v2/orders/{orderExternalId}/invoices": {
      "get": {
        "tags": [
          "API v2_Orders"
        ],
        "summary": "Get invoice Uuids",
        "description": "Returns the Uuids of all the invoices matched to an order, based on the order's External Id.",
        "operationId": "InvoiceUuidsGet",
        "parameters": [
          {
            "name": "orderExternalId",
            "in": "path",
            "description": "(Required) The order ID used in a tenant's system. This is the externalId in the Order shape.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-Uuid",
            "in": "header",
            "description": "(Required) Your tenant UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of invoice uuids",
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/invoiceUuidResponse"
                  }
                }
              }
            },
            "x-ms-summary": "List of invoice uuids"
          },
          "400": {
            "description": "A detailed description of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequestResponse"
                }
              }
            },
            "x-ms-summary": "Invalid Invoice"
          },
          "401": {
            "description": "No description"
          },
          "403": {
            "description": "No description"
          },
          "404": {
            "description": "No description"
          },
          "500": {
            "description": "No description"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/v2/invoices/{invoiceUuid}/documents": {
      "post": {
        "tags": [
          "API v2_Invoices"
        ],
        "summary": "Attach documents",
        "description": "This endpoint attaches a document, encoded as a base64 string, to an invoice.",
        "operationId": "AttachDocument",
        "parameters": [
          {
            "name": "X-Tenant-Uuid",
            "in": "header",
            "description": "(Required) Your tenant UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceUuid",
            "in": "path",
            "description": "(Required) The UUID of the invoice.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "(Required) The documents to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/documentAttachRequest"
              },
              "examples": {
                "DocumentAttachRequestExample": {
                  "value": {
                    "Name": "invoice_sample-1693412540139.pdf",
                    "Type": "Invoice",
                    "Base64String": "SGVsbG8sIFdvcmxkIQ=="
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "UUID of the created document",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/documentCreatedResponse"
                }
              }
            },
            "x-ms-summary": "UUID of the created document"
          },
          "400": {
            "description": "A detailed description of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequestResponse"
                }
              }
            },
            "x-ms-summary": "Invalid Documents"
          },
          "403": {
            "description": "A detailed description of the error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "x-ms-summary": "Non updatable invice"
          },
          "404": {
            "description": "A detailed description of the error",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "x-ms-summary": "Non found invoice"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/v2/invoices/{invoiceUuid}/disputes": {
      "get": {
        "tags": [
          "API v2_Disputes"
        ],
        "summary": "List disputes",
        "description": "This returns the complete list of disputes on a single invoice. It's assumed that the total number of disputes is relatively small, so there's no paging, filtering, etc. Note that communications are not included, those must be retrieved separately.\n\nNote that the list is returned in an undefined order.\n\nA dispute is associated with a single party. However, there may be multiple reasons for a single dispute, and they may be created or resolved at different times.",
        "operationId": "GetAllDisputes",
        "parameters": [
          {
            "name": "X-Tenant-Uuid",
            "in": "header",
            "description": "(Required) Your tenant UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceUuid",
            "in": "path",
            "description": "(Required) The UUID of the invoice.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of disputes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/disputeResponse"
                  }
                },
                "examples": {
                  "DisputeResponseListExample": {
                    "value": [
                      {
                        "Uuid": "d90a7841-b4eb-4c02-a4bf-667ea0f888c4",
                        "ETag": null,
                        "CreatedAt": "2025-09-04T15:09:43.2468663Z",
                        "ResolvedAt": "2025-09-08T15:09:43.2468938Z",
                        "Party": "Tenant",
                        "Reasons": [
                          {
                            "Description": "Approval Required",
                            "CreatedAt": "2025-09-04T15:09:43.2469631Z",
                            "ResolvedAt": "2025-09-08T15:09:43.2470013Z"
                          }
                        ]
                      },
                      {
                        "Uuid": "53040c6d-02a2-4ae4-9d7b-ea4ef443979e",
                        "ETag": null,
                        "CreatedAt": "2025-09-04T15:09:43.2470437Z",
                        "ResolvedAt": "2025-09-08T15:09:43.2470438Z",
                        "Party": "Vendor",
                        "Reasons": [
                          {
                            "Description": "Accessorial Waived",
                            "CreatedAt": "2025-09-04T15:09:43.2470441Z",
                            "ResolvedAt": "2025-09-08T15:09:43.2470442Z"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            },
            "x-ms-summary": "A list of disputes"
          },
          "404": {
            "description": "The tenant UUID or the invoice UUID was not found",
            "x-ms-summary": "Invoice not found"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/v2/invoices/{invoiceUuid}/disputes/{disputeUuid}": {
      "get": {
        "tags": [
          "API v2_Disputes"
        ],
        "summary": "Get a dispute",
        "description": "This returns a single dispute on a single invoice. Note that communications are not included, those must be retrieved separately.",
        "operationId": "GetOneDispute",
        "parameters": [
          {
            "name": "X-Tenant-Uuid",
            "in": "header",
            "description": "(Required) Your tenant UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceUuid",
            "in": "path",
            "description": "(Required) The UUID of the invoice.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "disputeUuid",
            "in": "path",
            "description": "(Required) The UUID of the dispute.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single dispute",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/disputeResponse"
                }
              }
            },
            "x-ms-summary": "A single dispute"
          },
          "404": {
            "description": "The tenant UUID, the invoice UUID, or the dispute UUID was not found",
            "x-ms-summary": "Invoice not found"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/v2/invoices/{invoiceUuid}/disputes/{disputeUuid}/communications/{communicationUuid}/attachments/{identifier}": {
      "get": {
        "tags": [
          "API v2_Disputes"
        ],
        "summary": "Get one attachment",
        "description": "This returns a single attachment file for the given communication.",
        "operationId": "GetOneAttachment",
        "parameters": [
          {
            "name": "X-Tenant-Uuid",
            "in": "header",
            "description": "(Required) Your tenant UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceUuid",
            "in": "path",
            "description": "(Required) The UUID of the invoice.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "disputeUuid",
            "in": "path",
            "description": "(Required) The UUID of the dispute.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "communicationUuid",
            "in": "path",
            "description": "(Required) The UUID of the communication.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "identifier",
            "in": "path",
            "description": "(Required) The identifier should be the name of the attachment.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single attachment file",
            "headers": {
              "Content-Disposition": {
                "description": "Specifies the presentation and file type of the response content.",
                "schema": {
                  "type": "string"
                }
              },
              "Content-Type": {
                "description": "Specifies the MIME type of the response content.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "x-ms-summary": "Returns  a single attachment file for the given communication."
          },
          "404": {
            "description": "The tenant UUID, the invoice UUID, or the dispute UUID was not found",
            "x-ms-summary": "Invoice not found"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/v2/invoices/{invoiceUuid}/disputes/{disputeUuid}/communications": {
      "get": {
        "tags": [
          "API v2_Disputes"
        ],
        "summary": "List communications",
        "description": "This returns the complete list of communications associated with a dispute.\n\nIf a communication was an email, it'll contain an `email` property that includes email-specific fields. If the `email` property isn't present, it indicates the communication was internal to the Navix app and wasn't emailed.\n\nNote that the list is returned in an undefined order.",
        "operationId": "GetAllCommunications",
        "parameters": [
          {
            "name": "X-Tenant-Uuid",
            "in": "header",
            "description": "(Required) Your tenant UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceUuid",
            "in": "path",
            "description": "(Required) The UUID of the invoice.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "disputeUuid",
            "in": "path",
            "description": "(Required) The UUID of the dispute.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of communications",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/communicationResponse"
                  }
                },
                "examples": {
                  "CommunicationResponseListExample": {
                    "value": [
                      {
                        "Uuid": "59d7757e-4636-4f22-a67b-735c2e58218e",
                        "CreatedAt": "2025-09-04T15:09:43.2596235Z",
                        "Text": "Weight on order did not match invoice, please provide a Weight Certificate or Inspection Certificate for L12345",
                        "Email": {
                          "To": [
                            "dispute-communication-vendor-example@navix.io"
                          ],
                          "Cc": [
                            "dispute-communication-vendor-example-cc@navix.io"
                          ],
                          "Subject": "Required Documentation Missing | Load L12345"
                        },
                        "Attachments": []
                      },
                      {
                        "Uuid": "ee662e84-0532-47cc-8a89-2bcafc6469d5",
                        "CreatedAt": "2025-09-05T15:09:43.2597845Z",
                        "Text": "Please see the attached weight certificate for L12345",
                        "Email": {
                          "To": [
                            "from-vendor-example@navix.io"
                          ],
                          "Cc": [
                            "from-vendor-example-cc@navix.io"
                          ],
                          "Subject": "Weight Certificate Attached"
                        },
                        "Attachments": [
                          {
                            "Identifier": "da45475b-f548-49b6-8613-ad0f1033a5f8"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            },
            "x-ms-summary": "Returns a list of communications for a dispute"
          },
          "404": {
            "description": "The tenant UUID, the invoice UUID, or the dispute UUID was not found",
            "x-ms-summary": "Invoice not found"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      },
      "post": {
        "tags": [
          "API v2_Disputes"
        ],
        "summary": "Create communication",
        "description": "This creates a communication on a dispute.\n\nIf prior communications on the dispute have generated emails, then this endpoint will send out a corresponding email for the created communication.",
        "operationId": "PostCommunication",
        "parameters": [
          {
            "name": "X-Tenant-Uuid",
            "in": "header",
            "description": "(Required) Your tenant UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceUuid",
            "in": "path",
            "description": "(Required) The UUID of the invoice.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "disputeUuid",
            "in": "path",
            "description": "(Required) The UUID of the dispute.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "(Required) The communication to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/communicationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "UUID of the created Communication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/communicationAcceptedResponse"
                }
              }
            },
            "x-ms-summary": "UUID of the created Communication"
          },
          "400": {
            "description": "A detailed description of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequestResponse"
                }
              }
            },
            "x-ms-summary": "A detailed description of the error"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/v2/invoices/lookup/external/{externalId}": {
      "get": {
        "tags": [
          "API v2_Invoices"
        ],
        "summary": "Get Invoice Uuid",
        "description": "This endpoint accepts an External Id (Id used in the caller's system) and returns the corresponding UUID.\n\nEvery invoice is assigned a UUID with Navix. It can also, depending on its origin, have an External Id, assigned by the tenant or their TMS. This endpoint translates between those two Ids.",
        "operationId": "InvoiceExternalLookup",
        "parameters": [
          {
            "name": "X-Tenant-Uuid",
            "in": "header",
            "description": "(Required) Your tenant UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "externalId",
            "in": "path",
            "description": "(Required) The ExternalId of the invoice.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single Guid which is the Uuid of the Invoice in Navix.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/invoiceLookupResponse"
                }
              }
            },
            "x-ms-summary": "Returns  a single navix Uuid."
          },
          "404": {
            "description": "The Invoice UUID was not found.",
            "x-ms-summary": "Invoice not found"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/v2/invoices/lookup/{invoiceUuid}": {
      "get": {
        "tags": [
          "API v2_Invoices"
        ],
        "summary": "Get Invoice External Id",
        "description": "This endpoint accepts a UUID and returns the corresponding External Id.\n\nEvery invoice is assigned a UUID with Navix. It can also, depending on its origin, have an External Id, assigned by the tenant or their TMS. This endpoint translates between those two Ids.",
        "operationId": "InvoiceLookup",
        "parameters": [
          {
            "name": "X-Tenant-Uuid",
            "in": "header",
            "description": "(Required) Your tenant UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "invoiceUuid",
            "in": "path",
            "description": "(Required) The UUID of the invoice.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single attachment file",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/externalInvoiceLookupResponse"
                }
              }
            },
            "x-ms-summary": "Returns  a single attachment file for the given communication."
          },
          "404": {
            "description": "The tenant UUID, the invoice UUID, or the dispute UUID was not found",
            "x-ms-summary": "Invoice not found"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/v2/invoices": {
      "post": {
        "tags": [
          "API v2_Invoices"
        ],
        "summary": "Create invoice",
        "description": "This endpoint creates a new invoice. It's designed to be used if you want to create invoices directly from your TMS (or other system), instead of using EDI or email. Note that the invoice is not created immediately; it may take several minutes for the invoice to be fully ingested.\n\nPlease note this endpoint is in provisional testing with beta tenants. Please reach out to your implementation manager or customer success contact to discuss the use of this endpoint.",
        "operationId": "Invoice",
        "parameters": [
          {
            "name": "X-Idempotency-Key",
            "in": "header",
            "description": "(Optional) Provide an X-Idempotency-Key to safely retry the request without accidentally performing the same operation twice.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-Uuid",
            "in": "header",
            "description": "(Required) Your tenant UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "(Required) The Invoice to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/invoiceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "External Id of the created Invoice",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/invoiceAcceptedResponse"
                }
              }
            },
            "x-ms-summary": "External Id of the created Invoice"
          },
          "400": {
            "description": "A detailed description of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequestResponse"
                }
              }
            },
            "x-ms-summary": "Invalid Invoice"
          },
          "401": {
            "description": "The user or tenant are not authorized to access this endpoint",
            "x-ms-summary": "Unauthorized"
          },
          "403": {
            "description": "The tenant is not authorized to access this endpoint",
            "x-ms-summary": "Forbbiden"
          },
          "500": {
            "description": "An internal server error has occured",
            "x-ms-summary": "Internal Server Error"
          },
          "503": {
            "description": "The invoice endpoint is temporarily unavailable",
            "x-ms-summary": "Service Unavailable"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/v2/invoices/{invoiceUuid}": {
      "get": {
        "tags": [
          "API v2_Invoices"
        ],
        "summary": "Get invoice",
        "description": "This returns an invoice. Unlike the 'Get Audit Results' endpoint, this can be used to return an invoice that's in any state, including one that hasn't been approved or terminated.\n\nThis endpoint takes a UUID. If you know the invoice's External Id, but not it's UUID, use the 'Get Invoice Uuid' endpoint first to translate the External Id to a UUID.",
        "operationId": "InvoiceGet",
        "parameters": [
          {
            "name": "invoiceUuid",
            "in": "path",
            "description": "(Required) The invoice UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "X-Tenant-Uuid",
            "in": "header",
            "description": "(Required) Your tenant UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get an Invoice based on UUID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vendorInvoicePublicDto"
                }
              }
            },
            "x-ms-summary": "Get an Invoice based on UUID."
          },
          "400": {
            "description": "A detailed description of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequestResponse"
                }
              }
            },
            "x-ms-summary": "Invalid Invoice"
          },
          "401": {
            "description": "No description"
          },
          "403": {
            "description": "No description"
          },
          "404": {
            "description": "No description"
          },
          "500": {
            "description": "No description"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/v2/invoices/{invoiceUuid}/documents/{documentUuid}/file": {
      "get": {
        "tags": [
          "API v2_Invoices"
        ],
        "summary": "Get invoice document",
        "description": "Gets the invoice PDF document. This will return the raw PDF file. There will be a `Content-Disposition` header that includes the name of the document.",
        "operationId": "RawInvoiceDocumentGet",
        "parameters": [
          {
            "name": "invoiceUuid",
            "in": "path",
            "description": "(Required) The invoice UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "documentUuid",
            "in": "path",
            "description": "(Required) The document UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "X-Tenant-Uuid",
            "in": "header",
            "description": "(Required) Your tenant UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the raw document",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "x-ms-summary": "Get the raw document"
          },
          "400": {
            "description": "A detailed description of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequestResponse"
                }
              }
            },
            "x-ms-summary": "Invalid Invoice"
          },
          "401": {
            "description": "No description"
          },
          "403": {
            "description": "No description"
          },
          "404": {
            "description": "No description"
          },
          "500": {
            "description": "No description"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/v2/orders/approved": {
      "post": {
        "tags": [
          "Provisional_Orders"
        ],
        "summary": "Get List of Approved Orders",
        "description": "Returns a list of OrderExternalIds within the specified time interval",
        "operationId": "GetApprovedOrders",
        "parameters": [
          {
            "name": "X-Tenant-Uuid",
            "in": "header",
            "description": "(Required) Your tenant UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "(Required) The search parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/orderApprovedRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of OrderExternalIds",
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/orderApprovedResponse"
                  }
                }
              }
            },
            "x-ms-summary": "List of documents"
          },
          "400": {
            "description": "A detailed description of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequestResponse"
                }
              }
            },
            "x-ms-summary": "Invalid Document"
          },
          "401": {
            "description": "No description"
          },
          "403": {
            "description": "No description"
          },
          "404": {
            "description": "No description"
          },
          "500": {
            "description": "No description"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/v2/pre/documents": {
      "post": {
        "tags": [
          "Provisional_Documents"
        ],
        "summary": "Ingest documents",
        "description": "This endpoint ingests documents as a base64 string.  As the process is asynchronous the processed documents will not appear in the system instantaneously. \n* Uploads to this endpoint go through a complex machine learning process. It differs from the 'Document Attachment' endpoint which simply allows files to be uploaded and associated with an existing invoice record. \n* This process works with models trained on an existing suite of auditing documents, and is occasionally supplemented by a human-in-the-loop to help guide and improve training.\n* It performs the following steps: \n\n  * Works with any sort of audit-related document (invoice, bill of lading, notice of assignment, etc.) \n  * Works with files in multiple formats (PDF, JPG, PNG, TIFF, etc.)\n  * Separates pages within a file into multiple documents as necessary (e.g. separates an invoice on page 1 of a PDF from the bill of lading on page 2 of the same PDF file)\n  * Converts all document formats to PDF\n  * Classifies the document (currently based on a list of around 30 different document types)\n  * Identifies relevant fields in the documents (”Invoice Date”, “Ship To”, “Bill To”, etc.)\n  * Transcribes text and data from the documents (using OCR)\n  * For invoice documents, creates a new invoice record, based on the data transcribed from the invoice.  This may include supplemental data from other documents in the same submission. That is, if page 1 was an invoice and page 2 was a bill of lading, data from the bill of lading might be used on the invoice record if it wasn't present on the invoice\n  * For non-invoice documents, attempts to match the document with an existing invoice record (using reference numbers and other identifiers)\n  * Attach the resulting PDF file(s) to the invoice record. This occurs for both the invoice document itself and supporting documents.\n\nYou must be explicitly granted access to use this endpoint. Please contact your Customer Success Manager to request access.",
        "operationId": "Document",
        "parameters": [
          {
            "name": "X-Idempotency-Key",
            "in": "header",
            "description": "(Optional) Provide an X-Idempotency-Key to safely retry the request without accidentally performing the same operation twice.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-Uuid",
            "in": "header",
            "description": "(Required) Your tenant UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "(Required) The documents to create.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/documentRequest"
              },
              "examples": {
                "DocumentRequestExample": {
                  "value": {
                    "ExternalId": "ExternalPlatform123",
                    "ExternalOrderId": "Order123",
                    "ExternalInvoiceId": "Invoice123",
                    "Files": [
                      {
                        "FileBase64String": "SGVsbG8sIFdvcmxkIQ==",
                        "FileName": "invoice.png"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "No description"
          },
          "400": {
            "description": "A detailed description of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequestResponse"
                }
              }
            },
            "x-ms-summary": "Invalid Documents"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/v2/documents/metadata/{documentUuid}": {
      "get": {
        "tags": [
          "Provisional_Documents"
        ],
        "summary": "Get Document Metadata By Uuid",
        "description": "Get a document. Note: the 'fields' property is highly variable and subject to change based on document transcription.",
        "operationId": "GetDocument",
        "parameters": [
          {
            "name": "X-Tenant-Uuid",
            "in": "header",
            "description": "(Required) Your tenant UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentUuid",
            "in": "path",
            "description": "(Required) The UUID of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The document.",
            "content": {
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/documentResponse"
                }
              }
            },
            "x-ms-summary": "Document"
          },
          "401": {
            "description": "No description"
          },
          "403": {
            "description": "No description"
          },
          "404": {
            "description": "No description"
          },
          "500": {
            "description": "No description"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/v2/attachment/{documentUuid}": {
      "get": {
        "tags": [
          "Provisional_Documents"
        ],
        "summary": "Get one attachment",
        "description": "This returns a single file binary for the given document.",
        "operationId": "GetDocumentAttachment",
        "parameters": [
          {
            "name": "X-Tenant-Uuid",
            "in": "header",
            "description": "(Required) Your tenant UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "documentUuid",
            "in": "path",
            "description": "(Required) The UUID of the document.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A single attachment file",
            "headers": {
              "Content-Disposition": {
                "description": "Specifies the presentation and file type of the response content.",
                "schema": {
                  "type": "string"
                }
              },
              "Content-Type": {
                "description": "Specifies the MIME type of the response content.",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "x-ms-summary": "Returns  a single attachment file for the given communication."
          },
          "404": {
            "description": "The tenant UUID or the document UUID was not found",
            "x-ms-summary": "Invoice not found"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/v2/documents/orders/{orderExternalId}": {
      "get": {
        "tags": [
          "Provisional_Documents"
        ],
        "summary": "Get document Uuids",
        "description": "Returns the Uuids of all the documents matched to an order, based on the order's uuid.",
        "operationId": "DocumentUuidsGet",
        "parameters": [
          {
            "name": "orderExternalId",
            "in": "path",
            "description": "(Required) The Order External Id of the Order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-Uuid",
            "in": "header",
            "description": "(Required) Your tenant UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of document uuids",
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/documentUuidResponse"
                  }
                }
              }
            },
            "x-ms-summary": "List of document uuids"
          },
          "400": {
            "description": "A detailed description of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequestResponse"
                }
              }
            },
            "x-ms-summary": "Invalid Document"
          },
          "401": {
            "description": "No description"
          },
          "403": {
            "description": "No description"
          },
          "404": {
            "description": "No description"
          },
          "500": {
            "description": "No description"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/v2/documents/metadata/orders/{orderExternalId}": {
      "get": {
        "tags": [
          "Provisional_Documents"
        ],
        "summary": "Get Document Metadata By OrderExternalId",
        "description": "Returns the metadata of all the documents matched to an order, based on the order's orderExternalId.",
        "operationId": "DocumentMetatadataGet",
        "parameters": [
          {
            "name": "orderExternalId",
            "in": "path",
            "description": "(Required) The Order External Id of the Order.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "X-Tenant-Uuid",
            "in": "header",
            "description": "(Required) Your tenant UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of documents",
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/documentResponse"
                  }
                }
              }
            },
            "x-ms-summary": "List of documents"
          },
          "400": {
            "description": "A detailed description of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequestResponse"
                }
              }
            },
            "x-ms-summary": "Invalid Document"
          },
          "401": {
            "description": "No description"
          },
          "403": {
            "description": "No description"
          },
          "404": {
            "description": "No description"
          },
          "500": {
            "description": "No description"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/v2/documents/approved": {
      "post": {
        "tags": [
          "Provisional_Documents"
        ],
        "summary": "Get List of Approved Documents",
        "description": "Returns a list of approved documents within the specified time interval",
        "operationId": "GetApprovedDocuments",
        "parameters": [
          {
            "name": "X-Tenant-Uuid",
            "in": "header",
            "description": "(Required) Your tenant UUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "(Required) The search parameters.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/documentsApprovedRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "List of documents",
            "content": {
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/documentsApprovedResponse"
                  }
                }
              }
            },
            "x-ms-summary": "List of documents"
          },
          "400": {
            "description": "A detailed description of the error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/badRequestResponse"
                }
              }
            },
            "x-ms-summary": "Invalid Document"
          },
          "401": {
            "description": "No description"
          },
          "403": {
            "description": "No description"
          },
          "404": {
            "description": "No description"
          },
          "500": {
            "description": "No description"
          }
        },
        "security": [
          {
            "X-Api-Key": []
          }
        ]
      }
    },
    "/v2/pre/documents/textlocate": {
      "post": {
        "tags": [
          "Provisional_Documents"
        ],
        "summary": "TextLocate Webhook",
        "description": "Webhook endpoint for TextLocate to notify about new documents. This endpoint will process the images and forward them to the document ingestion pipeline.",
        "operationId": "TextLocateWebhook",
        "parameters": [
          {
            "name": "tenantUuid",
            "in": "header",
            "description": "(Required) The tenant UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "signature",
            "in": "header",
            "description": "(Required) The Signature from TextLocate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/textLocateWebhookRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The webhook was processed successfully"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Invalid API key"
          }
        },
        "security": [
          {
            "apiKey": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Customer.Api.Models.Requests.CustomerContactRequest": {
        "type": "object",
        "properties": {
          "contactName": {
            "type": "string",
            "nullable": true
          },
          "contactPhone": {
            "type": "string",
            "nullable": true
          },
          "contactEmail": {
            "type": "string",
            "nullable": true
          },
          "department": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Customer.Api.Models.Requests.Integrations.CustomerRequest": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "An ID used by the API consumer's system such as the ID in the TMS.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The name of the Customer.",
            "nullable": true
          },
          "currencyId": {
            "type": "string",
            "description": "The currency used by this Customer. Defaults to \"USD\". Possible values are:\r\n* `USD`\r\n* `CAD`",
            "nullable": true
          },
          "billingTermId": {
            "type": "string",
            "description": "The billing term for the Customer. Defaults to \"NET 30\". Possible values are:\r\n* `Net 0`\r\n* `Net 1`\r\n* `Net 2`\r\n* `Net 5`\r\n* `Net 7`\r\n* `Net 10`\r\n* `Net 14`\r\n* `Net 15`\r\n* `Net 20`\r\n* `Net 21`\r\n* `Net 24`\r\n* `Net 25`\r\n* `Net 27`\r\n* `Net 28`\r\n* `Net 29`\r\n* `Net 30`\r\n* `Net 31`\r\n* `Net 32`\r\n* `Net 33`\r\n* `Net 35`\r\n* `Net 40`\r\n* `Net 45`\r\n* `Net 47`\r\n* `Net 50`\r\n* `Net 55`\r\n* `Net 60`\r\n* `Net 65`\r\n* `Net 67`\r\n* `Net 75`\r\n* `Net 90`\r\n* `Net 99`\r\n* `Net 120`\r\n* `Prepaid`",
            "nullable": true
          },
          "addressName": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "nullable": true
          },
          "zip4": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "principalContact": {
            "$ref": "#/components/schemas/Customer.Api.Models.Requests.CustomerContactRequest"
          }
        },
        "additionalProperties": false
      },
      "DatabaseMigrations.Domain.Enums.OrderReferenceNumberType": {
        "enum": [
          "BOLNumber",
          "PONumber",
          "SONumber",
          "GeneralReferenceNumber",
          "ShipmentNumber",
          "ExternalInvoiceId"
        ],
        "type": "string"
      },
      "Invoice.Application.Models.Enums.VendorInvoiceDocumentTypesEnum": {
        "enum": [
          "Invoice",
          "DeliveryReceipt",
          "ProofOfDelivery",
          "BillOfLading",
          "NoticeOfAssignment",
          "RateConfirmation",
          "WeightAndInspectionCertificate",
          "LetterOfAuthority",
          "LumperReceipt",
          "PackingList",
          "GeneratedInvoice",
          "Email",
          "CommercialInvoice",
          "CertificateOfOrigin",
          "CustomerRateConfirmation",
          "ElectronicInterchangeReceipt",
          "GatePass",
          "InsuranceCertificate",
          "OtherReceipt",
          "W9",
          "DeliveryOrder",
          "WeightScaleTicket",
          "TrailerInterchangeReceipt",
          "PurchaseOrder",
          "EscortTicket",
          "PermitReceipt",
          "ServiceOrder",
          "CertificateOfDestruction",
          "DonationReceipt",
          "SmartAndFinalStamp",
          "InboundTripReport",
          "WeighmasterCertificate",
          "CargoActivitySheet",
          "WeberBOL",
          "TimeCard",
          "TransferSheet",
          "TripManifest",
          "TrailerControlRecord",
          "TargetTripSheet",
          "ExitPass",
          "PortOfArthurBOL",
          "ColdChainCustodyForm",
          "IGFFreightDispatch",
          "EquipmentSubmissionForm",
          "Release",
          "ACIManifest",
          "ShipTicket",
          "DeliveryTicket",
          "InvoiceCorrected",
          "EIRTicket",
          "PalletReceipt",
          "HistoricalAuditDocuments",
          "DetentionReceipt",
          "Unknown",
          "Manifest",
          "CustomerRateApproval",
          "LoadCoverSheet",
          "SafetyChecklist",
          "WalmartDeliveryConfirmationReport",
          "StatementInvoice"
        ],
        "type": "string"
      },
      "Invoice.Models.Integrations.InvoiceAuditResult": {
        "type": "object",
        "properties": {
          "invoiceDetails": {
            "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultDetails"
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultOrder"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Integrations.InvoiceAuditResultCustomerCharge": {
        "type": "object",
        "properties": {
          "charge": {
            "type": "number",
            "description": "The finalized charge amount after auditing.",
            "format": "double"
          },
          "type": {
            "type": "string",
            "description": "This type or category for the charge. This may or may not have meaning to the API consumer's system. A \"Type\" is a parent for a \"Code\"; that is, there's a 1:* relationship between Type and Code.",
            "nullable": true
          },
          "typeUuid": {
            "type": "string",
            "description": "The unique identifier for the charge type.",
            "format": "uuid"
          },
          "code": {
            "type": "string",
            "description": "The code used by the tenant to identify this specific charge; this likely corresponds to a code in the tenant's TMS.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description that accompanies the Code. Codes and Descriptions are both provided by the tenant.",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "description": "The reason that accompanies the finalized charge amount. This may be empty if there is no variance.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Integrations.InvoiceAuditResultDetails": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "The source of the document, i.e. Manual, EDI, OCR, etc.\r\n\r\nIn some endpoints, this is also labeled as `VendorInvoiceFormatDescription`",
            "nullable": true
          },
          "number": {
            "type": "string",
            "description": "Likely the unique identifier for the invoice in the tenant's TMS.",
            "nullable": true
          },
          "associatedOrderLineItems": {
            "type": "boolean",
            "description": "Associated order line items"
          },
          "invoiceDate": {
            "type": "string",
            "description": "The date (without time) when the invoice was issued by the vendor.",
            "format": "date"
          },
          "totalVendorPaymentAmount": {
            "type": "number",
            "description": "The total amount payable to the Vendor (the calculated sum of all adjusted vendor charges.)",
            "format": "double",
            "nullable": true
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency used with this invoice. Possible values are:\r\n* `USD` (US Dollar)\r\n* `CAD` (Canadian Dollar)",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "The date (without time) the invoice was created within Navix",
            "format": "date"
          },
          "approvedDate": {
            "type": "string",
            "description": "The date (without time) the invoice was finalized (either approved or terminated)",
            "format": "date"
          },
          "approverEmail": {
            "type": "string",
            "description": "The email address of the person who approved this invoice",
            "nullable": true
          },
          "terminatedReason": {
            "type": "string",
            "description": "If the invoice was terminated, the reason why it was terminated. This will be null if the invoice was approved",
            "nullable": true
          },
          "terminatedMessage": {
            "type": "string",
            "description": "If the invoice was terminated, a more detailed explanation of why it was terminated. This will be null if the invoice was approved",
            "nullable": true
          },
          "lineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultLineItemDetail"
            },
            "description": "Line items for the invoice",
            "nullable": true
          },
          "invoiceReferenceNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultInvoiceReferenceNumber"
            },
            "description": "Reference numbers associated with this invoice",
            "nullable": true
          },
          "vendor": {
            "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultVendor"
          },
          "freightChargeTerms": {
            "type": "string",
            "description": "Freight charge terms associated with this order. Example values include but are not limited to:\r\n* `Collect`\r\n* `Third Party`\r\n* `Prepaid`",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Integrations.InvoiceAuditResultDocument": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of document. This is a more human-readable version of the `StandardizedType` -- e.g., the `Type` might be \"Delivery Receipt\" while the `StandardizedType` \r\nwould be `DeliveryReceipt`.",
            "nullable": true
          },
          "standardizedType": {
            "$ref": "#/components/schemas/Invoice.Application.Models.Enums.VendorInvoiceDocumentTypesEnum"
          },
          "uuid": {
            "type": "string",
            "description": "The UUID of the document. This can be used with the \"Download invoice document\" endpoint to retrieve the binary document file",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "The name of the document",
            "nullable": true
          },
          "isRedacted": {
            "type": "boolean",
            "description": "Whether or not the document has been redacted"
          },
          "redactedDocumentUuid": {
            "type": "string",
            "description": "The UUID of the redacted document associated with this document",
            "format": "uuid",
            "nullable": true
          },
          "hasSignature": {
            "type": "boolean",
            "description": "Whether or not a signature was detected on the document"
          },
          "modifiedDate": {
            "type": "string",
            "description": "The date the document was last modified",
            "format": "date"
          },
          "modifiedBy": {
            "type": "string",
            "description": "The user who last modified the document",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Integrations.InvoiceAuditResultInvoiceReferenceNumber": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of this reference number. Possible values include:\r\n* `OrderNumber`\r\n* `BOLNumber`\r\n* `PONumber`\r\n* `SONumber`\r\n* `GeneralReferenceNumber`\r\n* `ShipmentNumber`",
            "nullable": true
          },
          "number": {
            "type": "string",
            "description": "The value of the reference number",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Integrations.InvoiceAuditResultLineItemDetail": {
        "type": "object",
        "properties": {
          "orderLineItemId": {
            "type": "string",
            "description": "Order line item ID",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The line item description",
            "nullable": true
          },
          "weight": {
            "type": "number",
            "description": "The weight of this line item",
            "format": "double",
            "nullable": true
          },
          "weightUnit": {
            "type": "string",
            "description": "The weight unit of this line item.  Possible values include:\r\n* `LBS`\r\n* `KGS`",
            "nullable": true
          },
          "class": {
            "type": "number",
            "description": "The class of this line item. Note that this is a decimal value, so it could be values like `50` or `77.5`",
            "format": "double",
            "nullable": true
          },
          "nmfcCode": {
            "type": "string",
            "description": "The NMFC code of this line item",
            "nullable": true
          },
          "totalPieces": {
            "type": "integer",
            "description": "Total pieces of this line item",
            "format": "int32",
            "nullable": true
          },
          "handlingUnitCount": {
            "type": "integer",
            "description": "Handling unit count of this line item",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Integrations.InvoiceAuditResultOrder": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "A unique identifier for the order, generated by Navix. This may not have any meaning to the tenant's TMS",
            "format": "uuid"
          },
          "orderNumber": {
            "type": "string",
            "description": "Anidentifier for the order, generated by the tenant. This is likely the unique identifier for the order in the tenant's TMS",
            "nullable": true
          },
          "vendorCharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultVendorCharge"
            },
            "description": "All the vendor charges associated with this order.",
            "nullable": true
          },
          "customerCharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultCustomerCharge"
            },
            "description": "All the customer charges associated with this order.",
            "nullable": true
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultDocument"
            },
            "description": "All the documents that were initially ingested by Navix and are associated with this order.",
            "nullable": true
          },
          "orderReferenceNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultOrderReferenceNumber"
            },
            "description": "Reference numbers associated with this order.",
            "nullable": true
          },
          "freightChargeTerms": {
            "type": "string",
            "description": "Freight charge terms associated with this order. Example values include but are not limited to:\r\n* `Collect`\r\n* `Third Party`\r\n* `Prepaid`",
            "nullable": true
          },
          "vendorExternalId": {
            "type": "string",
            "description": "The unique identifier for the vendor, mastered by the tenant's system. This usually corresponds to the unique identifier for the vendor in the tenant's TMS",
            "nullable": true
          },
          "customerExternalId": {
            "type": "string",
            "description": "The unique identifier for the customer, mastered by the tenant's system. This usually corresponds to the unique identifier for the customer in the tenant's TMS",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Integrations.InvoiceAuditResultOrderReferenceNumber": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of this reference number. Possible values include:\r\n* `BOLNumber`\r\n* `PONumber`\r\n* `SONumber`\r\n* `GeneralReferenceNumber`\r\n* `ShipmentNumber`",
            "nullable": true
          },
          "number": {
            "type": "string",
            "description": "The value of the reference number",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Integrations.InvoiceAuditResultVendor": {
        "type": "object",
        "properties": {
          "scacCode": {
            "type": "string",
            "description": "The vendor SCAC code",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "description": "The vendor external ID. This is usually the vendor's unique identifier within the tenant's TMS",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "A description of the vendor -- usually the company name",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Integrations.InvoiceAuditResultVendorCharge": {
        "type": "object",
        "properties": {
          "charge": {
            "type": "number",
            "description": "The finalized charge amount after auditing.",
            "format": "double"
          },
          "type": {
            "type": "string",
            "description": "This type or category for the charge. This may or may not have meaning to the API consumer's system. A \"Type\" is a parent for a \"Code\"; that is, there's a 1:* relationship between Type and Code.",
            "nullable": true
          },
          "typeUuid": {
            "type": "string",
            "description": "The unique identifier for the charge type.",
            "format": "uuid"
          },
          "code": {
            "type": "string",
            "description": "The code used by the tenant to identify this specific charge; this likely corresponds to a code in the tenant's TMS.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description that accompanies the Code. Codes and Descriptions are both provided by the tenant.",
            "nullable": true
          },
          "reason": {
            "type": "string",
            "description": "The reason that accompanies the finalized charge amount. This may be empty if there is no variance.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Responses.FinalizedInvoicePaginationResponse": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32"
          },
          "records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice.Models.Responses.FinalizedInvoiceResponse"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Responses.FinalizedInvoiceResponse": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "finalizationDate": {
            "type": "string",
            "format": "date-time"
          },
          "source": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Microsoft.AspNetCore.Mvc.ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "Microsoft.AspNetCore.Mvc.ValidationProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": {}
      },
      "Order.Models.Integrations.OrderCompositeChargeRequest": {
        "type": "object",
        "properties": {
          "chargeType": {
            "type": "string",
            "nullable": true
          },
          "chargeTypeUuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "currencyId": {
            "type": "integer",
            "format": "int32"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "charge": {
            "type": "number",
            "format": "double"
          },
          "metaData": {
            "type": "string",
            "nullable": true
          },
          "vendorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "code": {
            "type": "string",
            "description": "The code used by the tenant to identify a charge.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description used by the vendor to identify a charge.",
            "nullable": true
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Order.Models.Integrations.OrderCompositeLineItemRequest": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "nullable": true
          },
          "sequenceNum": {
            "type": "string",
            "nullable": true
          },
          "handlingUnit": {
            "type": "string",
            "description": "Possible values include:\r\n* `Pallet`\r\n* `Drum`\r\n* `Bags`\r\n* `Barrels`\r\n* `Crates`\r\n* `Bundles`\r\n* `Piece`\r\n* `Loose`\r\n* `Boxes`\r\n* `Cases`\r\n* `Carton`\r\n* `Totes`\r\n* `Cans`\r\n* `Cylinders`\r\n* `FlatRacks`\r\n* `Kegs`\r\n* `Pails`\r\n* `Reels`\r\n* `Rolls`\r\n* `Tanks`\r\n* `Tubes`",
            "nullable": true
          },
          "handlingUnitCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "totalPieces": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "weight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "weightUnit": {
            "type": "string",
            "description": "The unit applied to the `Weight` field. Possible values include:\r\n* `LBS`\r\n* `KG`",
            "nullable": true
          },
          "class": {
            "type": "number",
            "description": "The class for the line item. Possible values include:\r\n* `50`\r\n* `55`\r\n* `60`\r\n* `65`\r\n* `70`\r\n* `77.5`\r\n* `85`\r\n* `92.5`\r\n* `100`\r\n* `110`\r\n* `125`\r\n* `150`\r\n* `175`\r\n* `200`\r\n* `250`\r\n* `300`\r\n* `400`\r\n* `500`",
            "format": "double",
            "nullable": true
          },
          "nmfcCode": {
            "type": "string",
            "nullable": true
          },
          "length": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "width": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "height": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "dimUnits": {
            "type": "string",
            "description": "The units that apply to length, width, and height. Possible values are:\r\n* `IN`\r\n* `CM`",
            "nullable": true
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Order.Models.Integrations.OrderCompositeReferenceNumberRequest": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "The value of the reference number. The meaning of this number is determined by the ReferenceNumberType field, but is likely based on data\r\noutside of Navix. Use reference numbers to store unique identifiers from your system.",
            "nullable": true
          },
          "referenceNumberType": {
            "$ref": "#/components/schemas/DatabaseMigrations.Domain.Enums.OrderReferenceNumberType"
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Order.Models.Integrations.OrderCompositeRequest": {
        "type": "object",
        "properties": {
          "orderNumber": {
            "type": "string",
            "description": "The unique identifier for the Order (i.e, \"Load Number\", \"Shipment Number\"). This value should be the commonly known identifier for the order that is shared with Vendors (i.e., \"Carrier\").",
            "nullable": true
          },
          "transportationMode": {
            "type": "string",
            "description": "The mode for the order. This field is required if validations are enabled. Possible values are:\r\n* `Ground`\r\n* `Air`\r\n* `Non-Freight`\r\n* `Ocean`\r\n* `Rail`",
            "nullable": true
          },
          "transportationServiceLevel": {
            "type": "string",
            "description": "The service level for the order. This field is required if validations are enabled. Possible values are:\r\n* `Standard`\r\n* `Next Day AM`\r\n* `Next Day PM`\r\n* `2nd Day`\r\n* `Deferred`\r\n* `3-5 Day`\r\n* `International`\r\n* `Next Day`\r\n* `Volume`\r\n* `Conestoga`\r\n* `Consolidation`\r\n* `Flatbed`\r\n* `Temperature Controlled`\r\n* `4PL`\r\n* `Priority`\r\n* `Economy`\r\n* `Guaranteed`\r\n* `Guaranteed Exclusive`\r\n* `TCSW`\r\n* `TCSP`\r\n* `Power Only`\r\n* `Drop Trailer`\r\n* `Dump Trailer`\r\n* `Guaranteed 5PM`\r\n* `Guaranteed 12PM`\r\n* `Guaranteed 330PM`\r\n* `Pilot Car`\r\n* `Installation`",
            "nullable": true
          },
          "transportationServiceType": {
            "type": "string",
            "description": "The service type for the order. Possible values if validations are enabled or it can be undefined:        \r\n* `LTL`\r\n* `TL`\r\n* `Parcel`\r\n* `Expedited`\r\n* `Air`\r\n* `Cartage`\r\n* `Drayage`\r\n* `Guaranteed`\r\n* `Intermodal`\r\n* `Warehouse`\r\n* `4PL`\r\n* `Ocean`\r\n* `Rail`\r\n* `Service`",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "The currency for the order. Defaults to USD. Possible values are:\r\n* `USD`\r\n* `CAD`",
            "nullable": true
          },
          "freightChargeTerms": {
            "type": "string",
            "description": "The freight charge terms for the order. This field is required if validations are enabled. Possible values are:\r\n* `Collect`\r\n* `Prepaid`\r\n* `Prepaid & Add`\r\n* `Third Party`",
            "nullable": true
          },
          "plannedShipmentWeight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "actualShipmentWeight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "cubicMeter": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "shipDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deliveredDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deliverTime": {
            "type": "string",
            "nullable": true,
            "example": "0.00:00:00"
          },
          "customerCharge": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "billingTerm": {
            "type": "string",
            "description": "The billing term for the order. This field is required if validations are enabled. Possible values are:\r\n* `Net 0`\r\n* `Net 1`\r\n* `Net 2`\r\n* `Net 5`\r\n* `Net 7`\r\n* `Net 10`\r\n* `Net 14`\r\n* `Net 15`\r\n* `Net 20`\r\n* `Net 21`\r\n* `Net 24`\r\n* `Net 25`\r\n* `Net 27`\r\n* `Net 28`\r\n* `Net 29`\r\n* `Net 30`\r\n* `Net 31`\r\n* `Net 32`\r\n* `Net 33`\r\n* `Net 35`\r\n* `Net 40`\r\n* `Net 45`\r\n* `Net 47`\r\n* `Net 50`\r\n* `Net 55`\r\n* `Net 60`\r\n* `Net 65`\r\n* `Net 67`\r\n* `Net 75`\r\n* `Net 90`\r\n* `Net 99`\r\n* `Net 120`\r\n* `Prepaid`",
            "nullable": true
          },
          "paymentTerms": {
            "type": "string",
            "nullable": true
          },
          "distance": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "metadata": {
            "type": "string",
            "nullable": true
          },
          "ratingEngineInfo": {
            "type": "string",
            "description": "Rating Engine information used by the Navix Rating Engine Integration. This field is optional and should be a list of key value pairs as json.\r\nHere are some predefined pairs:<br />\r\n{<br />\r\n  \"VendorAccountUserName\": \"value\",<br />\r\n  \"VendorAccountPassword\": \"value\",<br />\r\n  \"ContractID\": \"value\",<br />\r\n  \"ContractName\": \"value\",<br />\r\n  \"ServiceType\": \"value\"<br />\r\n}",
            "nullable": true
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "enableValidations": {
            "type": "boolean",
            "description": "If set to true, the order will be validated before being created, and an error will be returned if any validations fail."
          },
          "vendor": {
            "$ref": "#/components/schemas/Vendor.Models.Requests.Integrations.VendorRequest"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer.Api.Models.Requests.Integrations.CustomerRequest"
          },
          "division": {
            "type": "string",
            "description": "A tenant's arbitrary way to segment the order amongst multiple orders. Ex. values could be names of different departments at the tenant, or names of different teams",
            "nullable": true
          },
          "stops": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order.Models.Integrations.OrderCompositeStopRequest"
            },
            "nullable": true
          },
          "referenceNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order.Models.Integrations.OrderCompositeReferenceNumberRequest"
            },
            "nullable": true
          },
          "lineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order.Models.Integrations.OrderCompositeLineItemRequest"
            },
            "nullable": true
          },
          "charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order.Models.Integrations.OrderCompositeChargeRequest"
            },
            "description": "Deprecated. Replaced by VendorCharges",
            "nullable": true,
            "deprecated": true
          },
          "customerCharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order.Models.Integrations.OrderCompositeChargeRequest"
            },
            "nullable": true
          },
          "vendorCharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order.Models.Integrations.OrderCompositeChargeRequest"
            },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "This is a composite order that can be created. It contains all the information needed to create a new order, including customer, vendor, stops, line items, and charges."
      },
      "Order.Models.Integrations.OrderCompositeStopRequest": {
        "type": "object",
        "properties": {
          "stopSequence": {
            "type": "integer",
            "format": "int32"
          },
          "orderStopType": {
            "type": "string",
            "description": "The type of stop. Possible values are:\r\n* `Origin`\r\n* `Destination`\r\n* `Bill To`",
            "nullable": true
          },
          "addressName": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "This is a two-digit postal abbreviation, e.g. \"NY\" for \"New York\".",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "description": "This is a 5-digit (for U.S.) or 6-character (for Canada) postal code.",
            "nullable": true
          },
          "zip4": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "A 3-digit code for the country. Defaults to `USA`. Possible values are:\r\n* `USA`\r\n* `CAN`\r\n* `MEX`",
            "nullable": true
          },
          "uuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Vendor.Models.Requests.Integrations.VendorRequest": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "An ID used by the API consumer's system such as the ID in the TMS.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "nullable": true
          },
          "zip4": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "scacCode": {
            "type": "string",
            "nullable": true
          },
          "mcNumber": {
            "type": "string",
            "nullable": true
          },
          "dotNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Integrations.InvoiceAuditResultCustomerChargeV2": {
        "type": "object",
        "properties": {
          "charge": {
            "type": "number",
            "description": "The finalized charge amount after auditing.",
            "format": "double",
            "example": 200.3
          },
          "type": {
            "type": "string",
            "description": "This type or category for the charge. This may or may not have meaning to the API consumer's system. A \"Type\" is a parent for a \"Code\"; that is, there's a 1:* relationship between Type and Code.",
            "nullable": true,
            "example": "FSC"
          },
          "typeUuid": {
            "type": "string",
            "description": "The unique identifier for the charge type.",
            "format": "uuid"
          },
          "code": {
            "type": "string",
            "description": "The code used by the tenant to identify this specific charge; this likely corresponds to a code in the tenant's TMS.",
            "nullable": true,
            "example": "Fuel"
          },
          "description": {
            "type": "string",
            "description": "The description that accompanies `Code`. Codes and descriptions are both provided by the tenant.",
            "nullable": true,
            "example": "Fuel Surcharge"
          },
          "reason": {
            "type": "string",
            "description": "The reason that accompanies the finalized charge amount. This may be empty if there is no variance.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Integrations.InvoiceAuditResultDetailsV2": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "The source of the document. Possible values include:\r\n* `Manual`: the document was uploaded through the Navix UI\r\n* `EDI`: the document was received thrugh EDI\r\n* `Email`: the document was received via email\r\n* `API`: the document was uploaded to the Navix API\r\n\r\nSome deprecated endpoints refer to this as `VendorInvoiceFormatDescription`.",
            "nullable": true,
            "example": "Manual"
          },
          "number": {
            "type": "string",
            "description": "An identifier for the invoice, often the unique identifier in the tenant's TMS.",
            "nullable": true,
            "example": "123457"
          },
          "associatedOrderLineItems": {
            "type": "boolean",
            "description": "Associated order line items"
          },
          "invoiceDate": {
            "type": "string",
            "description": "The date (without time) when the invoice was issued by the Vendor.",
            "format": "date"
          },
          "totalVendorPaymentAmount": {
            "type": "number",
            "description": "The total amount payable to the vendor (the calculated sum of all adjusted vendor charges.)",
            "format": "double",
            "nullable": true,
            "example": 100.3
          },
          "currencyCode": {
            "type": "string",
            "description": "The currency used with this invoice. Possible values are:\r\n* `USD`: US Dollar\r\n* `CAD`: Canadian Dollar",
            "nullable": true,
            "example": "USD"
          },
          "createdDate": {
            "type": "string",
            "description": "The date (without time) the invoice was ingested by Navix",
            "format": "date"
          },
          "approvedDate": {
            "type": "string",
            "description": "The date (without time) the invoice was finalized (either approved or terminated). Note that terminated invoices still have a value here.",
            "format": "date"
          },
          "approverEmail": {
            "type": "string",
            "description": "The email address of the person who approved this invoice",
            "nullable": true,
            "example": "johndoe@sample-logistics-company.com"
          },
          "terminatedReason": {
            "type": "string",
            "description": "If the invoice was terminated, the reason why it was terminated. This is null if the invoice was approved.",
            "nullable": true,
            "example": "Not My Bill"
          },
          "terminatedMessage": {
            "type": "string",
            "description": "If the invoice was terminated, a more detailed explanation of why it was terminated. This will be null if the invoice was approved.",
            "nullable": true
          },
          "receivedDate": {
            "type": "string",
            "description": "The date the invoice was received by email. Received date is only captured for invoices originating from our Email ingestion process. In the UI, this will be where Invoice source = Email.",
            "format": "date",
            "nullable": true
          },
          "tags": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "This is used to annotate any additional information about the invoice that the system can use to process.          \r\n<example>\"tags\": {{\"No Order\": null}}</example>",
            "nullable": true
          },
          "lineItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultLineItemDetailV2"
            },
            "description": "Line items for the original invoice.",
            "nullable": true
          },
          "invoiceReferenceNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultInvoiceReferenceNumberV2"
            },
            "description": "Reference numbers associated with this invoice.",
            "nullable": true
          },
          "vendor": {
            "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultVendorV2"
          },
          "freightChargeTerms": {
            "type": "string",
            "description": "Freight charge terms associated with this order. Example values include but are not limited to:\r\n* `Collect`\r\n* `Third Party`\r\n* `Prepaid`",
            "nullable": true
          },
          "stops": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultStopV2"
            },
            "description": "The list of Stops",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Integrations.InvoiceAuditResultDocumentV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of document. This is a more human-readable version of the `StandardizedType` -- e.g., the `Type` might be \"Delivery Receipt\" while the `StandardizedType` \r\nwould be `DeliveryReceipt`.",
            "nullable": true,
            "example": "Invoice"
          },
          "standardizedType": {
            "$ref": "#/components/schemas/Invoice.Application.Models.Enums.VendorInvoiceDocumentTypesEnum"
          },
          "uuid": {
            "type": "string",
            "description": "The UUID of the document. This can be used with the \"Download invoice document\" endpoint to retrieve the binary document file.",
            "format": "uuid"
          },
          "submittedName": {
            "type": "string",
            "description": "The submitted name of the document.",
            "nullable": true,
            "example": "Invoice file name"
          },
          "name": {
            "type": "string",
            "description": "The name of the document.",
            "nullable": true,
            "example": "Invoice file name"
          },
          "isRedacted": {
            "type": "boolean",
            "description": "Whether or not the document has been redacted."
          },
          "redactedDocumentUuid": {
            "type": "string",
            "description": "If the document has been redacted, the UUID of the redacted version of the document.",
            "format": "uuid",
            "nullable": true
          },
          "hasSignature": {
            "type": "boolean",
            "description": "Whether or not the document has a signature."
          },
          "modifiedDate": {
            "type": "string",
            "description": "The date the document was last modified.",
            "format": "date"
          },
          "modifiedBy": {
            "type": "string",
            "description": "The name of the user who last modified the document.",
            "nullable": true,
            "example": "John Doe"
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Integrations.InvoiceAuditResultInvoiceReferenceNumberV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of reference number.  Possible values include:\r\n* `OrderNumber`\r\n* `BOLNumber`\r\n* `PONumber`\r\n* `SONumber`\r\n* `GeneralReferenceNumber`\r\n* `ShipmentNumber`",
            "nullable": true,
            "example": "ShipmentNumber"
          },
          "number": {
            "type": "string",
            "description": "The value of the reference number.",
            "nullable": true,
            "example": "SHIP-123456"
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Integrations.InvoiceAuditResultLineItemDetailV2": {
        "type": "object",
        "properties": {
          "orderLineItemId": {
            "type": "string",
            "description": "Order line item Id",
            "nullable": true,
            "example": "1"
          },
          "description": {
            "type": "string",
            "description": "The line item description.",
            "nullable": true,
            "example": "Widget"
          },
          "weight": {
            "type": "number",
            "description": "The weight of this line item.",
            "format": "double",
            "nullable": true,
            "example": 50.5
          },
          "weightUnit": {
            "type": "string",
            "description": "The weight unit of this line item.  Possible values include:\r\n* `LBS`\r\n* `KGS`",
            "nullable": true,
            "example": "LBS"
          },
          "class": {
            "type": "number",
            "description": "The class of this line item. Note that this is a decimal value, so it could be values like `50` or `77.5`.",
            "format": "double",
            "nullable": true,
            "example": 55
          },
          "nmfcCode": {
            "type": "string",
            "description": "The NMFC code of this line item.",
            "nullable": true,
            "example": "123456"
          },
          "totalPieces": {
            "type": "integer",
            "description": "Total pieces of this line item.",
            "format": "int32",
            "nullable": true,
            "example": 1
          },
          "handlingUnitCount": {
            "type": "integer",
            "description": "Handling unit count of this line item.",
            "format": "int32",
            "nullable": true,
            "example": 1
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Integrations.InvoiceAuditResultOrderReferenceNumberV2": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of reference number. Possible values include:\r\n* `BOLNumber`\r\n* `PONumber`\r\n* `SONumber`\r\n* `GeneralReferenceNumber`\r\n* `ShipmentNumber`",
            "nullable": true,
            "example": "ShipmentNumber"
          },
          "number": {
            "type": "string",
            "description": "A reference number associated with this Order.",
            "nullable": true,
            "example": "SHIP-123456"
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Integrations.InvoiceAuditResultOrderV2": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "A unique identifier for the order, issued by Navix. This may not have any meaning to the API consumer's system. If no order is attached to the invoice this will be null",
            "format": "uuid",
            "nullable": true
          },
          "orderNumber": {
            "type": "string",
            "description": "An identified for the order, issued by the tenant. This is likely the unique identifier for the order in the tenant's TMS. If no order is attached to the invoice this will be null",
            "nullable": true,
            "example": "ORD-12345"
          },
          "vendorCharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultVendorChargeV2"
            },
            "description": "All the vendor charges associated with the order and invoice.",
            "nullable": true
          },
          "customerCharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultCustomerChargeV2"
            },
            "description": "All the customer charges associated with the order and invoice.",
            "nullable": true
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultDocumentV2"
            },
            "description": "All the documents that were initially ingested by Navix and are associated with this order and invoice.",
            "nullable": true
          },
          "orderReferenceNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultOrderReferenceNumberV2"
            },
            "description": "Reference numbers associated with this order.",
            "nullable": true
          },
          "freightChargeTerms": {
            "type": "string",
            "description": "Freight Charge Terms associated with this Order. If no order is attached to the invoice this will be null. Example values include but are not limited to:\r\n* `Collect`\r\n* `Third Party`\r\n* `Prepaid`",
            "nullable": true,
            "example": "Collect"
          },
          "vendorExternalId": {
            "type": "string",
            "description": "The unique identifier for the vendor of the invoice attached to the order, mastered by the tenant's system. This is usually the unique identifier for the vendor in the tenant's TMS.",
            "nullable": true,
            "example": "ATRUCK101"
          },
          "customerExternalId": {
            "type": "string",
            "description": "The unique identifier for the customer of the invoice attached to the order, mastered by the tenant's system. This is usually the unique identifier for the customer in the tenant's TMS.",
            "nullable": true,
            "example": "CUST123"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "description": "The metadata of the order. Metadata is generally not used by Navix, but can be used by the tenant to store additional data about the order. If no order is attached to the invoice this will be null",
            "nullable": true,
            "example": {
              "AnyValue": {
                "ForInstanceATrackingNumber": "123-789",
                "OrAnything": "2024-10-14"
              },
              "SomeOtherValue": {
                "Sample1": "Value1"
              }
            }
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Integrations.InvoiceAuditResultStopAddressV2": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the address",
            "nullable": true,
            "example": "This is where the freight is picked up from"
          },
          "address1": {
            "type": "string",
            "description": "The street address",
            "nullable": true,
            "example": "123 Origin St"
          },
          "address2": {
            "type": "string",
            "description": "The street address (continued)",
            "nullable": true,
            "example": "Apartment 100"
          },
          "city": {
            "type": "string",
            "description": "The city",
            "nullable": true,
            "example": "Anytown"
          },
          "state": {
            "type": "string",
            "description": "The two or three character ISO 3166-2 code for the state or province",
            "nullable": true,
            "example": "NY"
          },
          "country": {
            "type": "string",
            "description": "The three character ISO 3166-1 alpha 3 code for the country.",
            "nullable": true,
            "example": "USA"
          },
          "postalCode": {
            "type": "string",
            "description": "The five digit or six character postal code",
            "nullable": true,
            "example": "12345"
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Integrations.InvoiceAuditResultStopV2": {
        "type": "object",
        "properties": {
          "sequence": {
            "type": "integer",
            "description": "The Stop sequence",
            "format": "int32",
            "example": 1
          },
          "type": {
            "type": "string",
            "description": "The type of Stop. Possible values include:\r\n* `Origin`\r\n* `Destination`\r\n* `Bill To`",
            "nullable": true,
            "example": "Origin"
          },
          "address": {
            "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultStopAddressV2"
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Integrations.InvoiceAuditResultV2": {
        "type": "object",
        "properties": {
          "invoiceDetails": {
            "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultDetailsV2"
          },
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invoice.Models.Integrations.InvoiceAuditResultOrderV2"
            },
            "description": "Additional information about the order/load attached to the invoice",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Audit result model for v2 endpoint."
      },
      "Invoice.Models.Integrations.InvoiceAuditResultVendorChargeV2": {
        "type": "object",
        "properties": {
          "charge": {
            "type": "number",
            "description": "The finalized charge amount after auditing.",
            "format": "double",
            "example": 100.3
          },
          "type": {
            "type": "string",
            "description": "This type or category for the charge. This may or may not have meaning to the API consumer's system. A \"Type\" is a parent for a \"Code\"; that is, there's a 1:* relationship between Type and Code.",
            "nullable": true,
            "example": "Base Rate"
          },
          "typeUuid": {
            "type": "string",
            "description": "The unique identifier for the charge type. This may or may not have meaning to the API consumer's system.",
            "format": "uuid"
          },
          "code": {
            "type": "string",
            "description": "The code used by the tenant to identify this specific charge; this likely corresponds to a code in the tenant's TMS.",
            "nullable": true,
            "example": "LHS"
          },
          "description": {
            "type": "string",
            "description": "The description that accompanies the `Code`. Codes and descriptions are both provided by the tenant.",
            "nullable": true,
            "example": "Linehaul Surcharge"
          },
          "reason": {
            "type": "string",
            "description": "The reason that accompanies the finalized charge amount. This may be empty if there is no variance.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Invoice.Models.Integrations.InvoiceAuditResultVendorV2": {
        "type": "object",
        "properties": {
          "scacCode": {
            "type": "string",
            "description": "The vendor SCAC Code",
            "nullable": true,
            "example": "ABCD"
          },
          "externalId": {
            "type": "string",
            "description": "The external ID of the vendor. This is usually the unique identifier for the vendor in the tenant's TMS",
            "nullable": true,
            "example": "ATRUCK101"
          },
          "description": {
            "type": "string",
            "description": "A invoice vendor description",
            "nullable": true,
            "example": "A Plus Trucking"
          }
        },
        "additionalProperties": false
      },
      "badRequestResponse": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "traceId": {
            "type": "string"
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/list_string"
            }
          }
        },
        "example": {
          "Type": "https://tools.ietf.org/html/rfc7231#section-6.5.1",
          "Title": "One or more validation errors occurred.",
          "Status": 400,
          "TraceId": "5eee0c1a-1656-462a-ab6c-a3ee502fbd4f",
          "Errors": {
            "InvoiceNumber": [
              "The InvoiceNumber field must be less than or equal to 64 characters long."
            ]
          }
        }
      },
      "communicationAcceptedResponse": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The unique identifier for the communication",
            "format": "uuid"
          }
        }
      },
      "communicationAttachmentResponse": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "A communication attachment identifier for downloading the file"
          }
        }
      },
      "communicationEmailResponse": {
        "type": "object",
        "properties": {
          "to": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of To email addresses on the email"
          },
          "cc": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of Cc email addresses on the email"
          },
          "subject": {
            "type": "string",
            "description": "The subject line of the email"
          }
        },
        "description": "If the communication was an email, this is the email-specific parts of the communication; otherwise this is null"
      },
      "communicationRequest": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "The text of the communication. If the dispute generates emails, this will be the body of the emails"
          },
          "subject": {
            "type": "string",
            "description": "The subject of the communication. If the dispute generates emails, this will be the subject of the emails"
          }
        }
      },
      "communicationResponse": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The unique identifier of the communication",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "description": "The date on which the communication was created",
            "format": "date-time"
          },
          "text": {
            "type": "string",
            "description": "The text of the communication. If it was an email, this is the email body"
          },
          "email": {
            "$ref": "#/components/schemas/communicationEmailResponse"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/communicationAttachmentResponse"
            },
            "description": "A list of attachments on the communication"
          }
        }
      },
      "dictionary_string": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "disputeReasonResponse": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A human-readable description of the reason for the dispute"
          },
          "createdAt": {
            "type": "string",
            "description": "The date on which the dispute reason was created",
            "format": "date-time"
          },
          "resolvedAt": {
            "type": "string",
            "description": "The date on which the dispute reason was resolved. The dispute is considered resolved when all dispute reasons have been resolved. Null for an unresolved dispute reason",
            "format": "date-time"
          }
        }
      },
      "disputeResponse": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The unique identifier of the dispute",
            "format": "uuid"
          },
          "eTag": {
            "type": "string",
            "description": "A concurrency key for the dispute. When mutating a dispute, the request will be rejected as a 409 Conflict if the eTag doesn't match the current eTag value for the dispute"
          },
          "createdAt": {
            "type": "string",
            "description": "The date on which the dispute was created",
            "format": "date-time"
          },
          "resolvedAt": {
            "type": "string",
            "description": "The date on which the dispute was resolved. The dispute is considered resolved when all dispute reasons have been resolved. This is null on an active (unresolved) dispute",
            "format": "date-time"
          },
          "party": {
            "enum": [
              "Vendor",
              "Tenant",
              "Customer"
            ],
            "type": "string",
            "description": "The party to which the dispute applies"
          },
          "reasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/disputeReasonResponse"
            },
            "description": "The reasons for the dispute. Note that a single dispute may have multiple reasons"
          }
        },
        "example": {
          "Uuid": "27a48d79-7fc0-46a2-b559-09f45cc90e34",
          "ETag": null,
          "CreatedAt": "2025-09-04T15:09:43.5149925Z",
          "ResolvedAt": "2025-09-08T15:09:43.5149946Z",
          "Party": "Tenant",
          "Reasons": [
            {
              "Description": "Approval Required",
              "CreatedAt": "2025-09-04T15:09:43.5149961Z",
              "ResolvedAt": "2025-09-08T15:09:43.5149963Z"
            }
          ]
        }
      },
      "documentAttachRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The file name to attach to the invoice. It doesn't need to be unique across files attached to the invoice."
          },
          "type": {
            "enum": [
              "Unset",
              "Invoice",
              "DeliveryReceipt",
              "ProofOfDelivery",
              "BillOfLading",
              "NoticeOfAssignment",
              "RateConfirmation",
              "WeightAndInspectionCertificate",
              "LetterOfAuthority",
              "LumperReceipt",
              "PackingList",
              "GeneratedInvoice",
              "Email",
              "CommercialInvoice",
              "CertificateOfOrigin",
              "CustomerRateConfirmation",
              "ElectronicInterchangeReceipt",
              "GatePass",
              "InsuranceCertificate",
              "OtherReceipt",
              "W9",
              "DeliveryOrder",
              "WeightScaleTicket",
              "TrailerInterchangeReceipt",
              "PurchaseOrder",
              "EscortTicket",
              "PermitReceipt",
              "ServiceOrder",
              "CertificateOfDestruction",
              "DonationReceipt",
              "SmartAndFinalStamp",
              "InboundTripReport",
              "WeighmasterCertificate",
              "CargoActivitySheet",
              "WeberBOL",
              "TimeCard",
              "TransferSheet",
              "TripManifest",
              "TrailerControlRecord",
              "TargetTripSheet",
              "ExitPass",
              "PortOfArthurBOL",
              "ColdChainCustodyForm",
              "IGFFreightDispatch",
              "EquipmentSubmissionForm",
              "Release",
              "ACIManifest",
              "TrailerPicture",
              "MaterialSafetyDataSheet",
              "ShipTicket",
              "DeliveryTicket",
              "InvoiceCorrected",
              "EIRTicket",
              "PalletReceipt",
              "HistoricalAuditDocuments",
              "DetentionReceipt",
              "Unknown",
              "Manifest",
              "CustomerRateApproval",
              "LoadCoverSheet",
              "SafetyChecklist",
              "WalmartDeliveryConfirmationReport",
              "StatementInvoice"
            ],
            "type": "string",
            "description": "The document type."
          },
          "base64String": {
            "type": "string",
            "description": "The document file to attach, encoded in base64."
          }
        }
      },
      "documentCreatedResponse": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "The unique identifier for the Document",
            "format": "uuid"
          }
        }
      },
      "externalInvoiceLookupResponse": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string"
          }
        }
      },
      "invoiceAcceptedResponse": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "The external identifier for the Invoice"
          }
        }
      },
      "invoiceAddressRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The name of the address"
          },
          "address1": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The street address"
          },
          "address2": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "The street address (continued)"
          },
          "city": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The city"
          },
          "state": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The two or three character ISO 3166-2 code for the state or province"
          },
          "country": {
            "enum": [
              "USA",
              "CAN",
              "MEX"
            ],
            "type": "string",
            "description": "The three character ISO 3166-1 alpha 3 code for the country. Defaults to 'USA' when empty.",
            "default": "USA",
            "nullable": true
          },
          "postalCode": {
            "maxLength": 6,
            "minLength": 0,
            "type": "string",
            "description": "The five digit postal code for `USA` or `MEX`. Will accept 6 digits if the country is `CAN` "
          }
        },
        "description": "The physical address of the Stop",
        "nullable": true
      },
      "invoiceChargeCodeRequest": {
        "required": [
          "description",
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "Vendor",
              "Tenant"
            ],
            "type": "string",
            "description": "The charge code type. If a tenant is normalizing their invoice charge codes and description before sending to Navix, they can send in the type as `Tenant` with the corresponding code and description. This will enable our application to display the charges based on Tenant Charge codes setup. This can be helpful when tenant’s have mapped carrier charge codes in their system to handle rating engine requests. If a tenant leaves type as blank or sends in type `Vendor`, we will lookup against the Vendor charge codes based on code and description upon ingestion. Any unknown vendor charges will need to be mapped during the audit process to build out vendor charge code list.",
            "default": "Vendor"
          },
          "description": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The Code description"
          },
          "value": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The Code value"
          }
        },
        "description": "A list of charge codes."
      },
      "invoiceChargeRequest": {
        "required": [
          "charge",
          "code"
        ],
        "type": "object",
        "properties": {
          "charge": {
            "type": "number",
            "description": "The charge amount",
            "format": "double"
          },
          "itemId": {
            "maxLength": 64,
            "minLength": 1,
            "type": "string",
            "description": "The unique identifier of an associated Item, if applicable. To classify a charge as a Base Rate, tenants can include the associated `Items.Id` value here. If no item Id is provided with a charge, Navix classification of charge process will continue"
          },
          "code": {
            "$ref": "#/components/schemas/invoiceChargeCodeRequest"
          }
        }
      },
      "invoiceCustomerRequest": {
        "required": [
          "externalId"
        ],
        "type": "object",
        "properties": {
          "externalId": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The Tenant's unique identifier for the Customer. This value should match the value used when creating Orders programmatically."
          }
        },
        "description": "If applicable, tenants can send in the associated Customer on an Invoice. This externalId will not be validated and if the Customer is not found in Navix we will show in  UI as no customer selected"
      },
      "invoiceItemDimensionRequest": {
        "type": "object",
        "properties": {
          "system": {
            "enum": [
              "Imperial",
              "Metric"
            ],
            "type": "string",
            "description": "The system of measurement. If the system is Imperial, all dimensions are in inches and pounds. If the system is Metric, all dimensions are in centimeters and kilograms. Defaults to 'Imperial' when empty.",
            "default": "Imperial"
          },
          "weight": {
            "maximum": 7.922816251426434e+28,
            "minimum": 0,
            "type": "number",
            "description": "Weight",
            "format": "double"
          },
          "volume": {
            "maximum": 7.922816251426434e+28,
            "minimum": 0,
            "type": "number",
            "description": "Volume",
            "format": "double"
          },
          "height": {
            "maximum": 7.922816251426434e+28,
            "minimum": 0,
            "type": "number",
            "description": "Height",
            "format": "double"
          },
          "length": {
            "maximum": 7.922816251426434e+28,
            "minimum": 0,
            "type": "number",
            "description": "Length",
            "format": "double"
          },
          "width": {
            "maximum": 7.922816251426434e+28,
            "minimum": 0,
            "type": "number",
            "description": "Width",
            "format": "double"
          },
          "stackable": {
            "type": "boolean",
            "description": "Indicates whether the Item is stackable"
          }
        },
        "description": "The physical dimensions of the Item"
      },
      "invoiceItemRequest": {
        "required": [
          "id",
          "handlingUnit",
          "handlingUnitCount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The unique identifier for the Item. This item Id can be used to set a charge as a Base Rate type in Navix, see below Charges section (charge.itemId) for this endpoint"
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The Item description"
          },
          "class": {
            "type": "number",
            "description": "The Item freight class. Accepted values: 50, 55, 60, 65, 70, 77.5, 85, 92.5, 100, 110, 125, 150, 175, 200, 250, 300, 400, 500  ",
            "format": "double"
          },
          "nmfcCode": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "The Item NMFC code"
          },
          "handlingUnit": {
            "enum": [
              "Pallet",
              "Drum",
              "Bag",
              "Barrels",
              "Crates",
              "Bundles",
              "Piece",
              "Loose",
              "Boxes",
              "Cases",
              "Carton",
              "Totes",
              "Cans",
              "Cylinders",
              "FlatRacks",
              "Kegs",
              "Pails",
              "Reels",
              "Rolls",
              "Tanks",
              "Tubes"
            ],
            "type": "string",
            "description": "The Item handling unit"
          },
          "handlingUnitCount": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "The quantity, in handling units",
            "format": "int32"
          },
          "totalCount": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "The total quantity",
            "format": "int32"
          },
          "dimensions": {
            "$ref": "#/components/schemas/invoiceItemDimensionRequest"
          }
        }
      },
      "invoiceLookupResponse": {
        "type": "object",
        "properties": {
          "invoiceUuid": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "invoiceReferenceNumberRequest": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "GeneralReferenceNumber",
              "OrderNumber",
              "BOLNumber",
              "PONumber",
              "SONumber",
              "ShipmentNumber"
            ],
            "type": "string",
            "description": "The Reference Number type. Defaults to 'GeneralReferenceNumber' when empty.",
            "default": "GeneralReferenceNumber"
          },
          "description": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The description"
          },
          "value": {
            "maxLength": 256,
            "minLength": 1,
            "type": "string",
            "description": "The value"
          }
        }
      },
      "invoiceRequest": {
        "required": [
          "invoiceNumber",
          "invoiceDate",
          "shipDate",
          "vendor"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "Invoice",
              "BalanceDue",
              "Supplemental"
            ],
            "type": "string",
            "description": "The invoice type. Defaults to 'Invoice' when empty.",
            "default": "Invoice"
          },
          "invoiceNumber": {
            "maxLength": 25,
            "minLength": 0,
            "type": "string",
            "description": "The unique identifier for the Invoice"
          },
          "invoiceDate": {
            "minLength": 1,
            "type": "string",
            "description": "The date on which the Invoice was generated",
            "format": "date-time"
          },
          "shipDate": {
            "minLength": 1,
            "type": "string",
            "description": "The date on which the freight was shipped",
            "format": "date-time"
          },
          "deliveryDate": {
            "type": "string",
            "description": "The date on which the freight was delivered",
            "format": "date-time"
          },
          "stops": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/invoiceStopRequest"
            },
            "description": "The list of stops"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/invoiceItemRequest"
            },
            "description": "The list of items"
          },
          "vendor": {
            "$ref": "#/components/schemas/invoiceVendorRequest"
          },
          "currency": {
            "enum": [
              "USD",
              "CAD"
            ],
            "type": "string",
            "description": "The three character ISO 4217 code for the Invoice currency. Defaults to 'USD' when empty",
            "default": "USD"
          },
          "chargeTerms": {
            "enum": [
              "Collect",
              "Prepaid",
              "PrepaidAdd",
              "ThirdParty"
            ],
            "type": "string",
            "description": "The freight payment terms"
          },
          "paymentTerms": {
            "enum": [
              "Net0",
              "Net1",
              "Net2",
              "Net3",
              "Net4",
              "Net5",
              "Net6",
              "Net7",
              "Net8",
              "Net9",
              "Net10",
              "Net11",
              "Net12",
              "Net13",
              "Net14",
              "Net15",
              "Net16",
              "Net17",
              "Net18",
              "Net19",
              "Net20",
              "Net21",
              "Net22",
              "Net23",
              "Net24",
              "Net25",
              "Net26",
              "Net27",
              "Net28",
              "Net29",
              "Net30",
              "Net31",
              "Net32",
              "Net33",
              "Net34",
              "Net35",
              "Net36",
              "Net37",
              "Net38",
              "Net39",
              "Net40",
              "Net41",
              "Net42",
              "Net43",
              "Net44",
              "Net45",
              "Net46",
              "Net47",
              "Net48",
              "Net49",
              "Net50",
              "Net51",
              "Net52",
              "Net53",
              "Net54",
              "Net55",
              "Net56",
              "Net57",
              "Net58",
              "Net59",
              "Net60",
              "Net61",
              "Net62",
              "Net63",
              "Net64",
              "Net65",
              "Net66",
              "Net67",
              "Net68",
              "Net69",
              "Net70",
              "Net71",
              "Net72",
              "Net73",
              "Net74",
              "Net75",
              "Net76",
              "Net77",
              "Net78",
              "Net79",
              "Net80",
              "Net81",
              "Net82",
              "Net83",
              "Net84",
              "Net85",
              "Net86",
              "Net87",
              "Net88",
              "Net89",
              "Net90",
              "Net91",
              "Net92",
              "Net93",
              "Net94",
              "Net95",
              "Net96",
              "Net97",
              "Net98",
              "Net99",
              "Net100",
              "Net101",
              "Net102",
              "Net103",
              "Net104",
              "Net105",
              "Net106",
              "Net107",
              "Net108",
              "Net109",
              "Net110",
              "Net111",
              "Net112",
              "Net113",
              "Net114",
              "Net115",
              "Net116",
              "Net117",
              "Net118",
              "Net119",
              "Net120",
              "Net121",
              "Net122",
              "Net123",
              "Net124",
              "Net125",
              "Net126",
              "Net127",
              "Net128",
              "Net129",
              "Net130",
              "Net131",
              "Net132",
              "Net133",
              "Net134",
              "Net135",
              "Net136",
              "Net137",
              "Net138",
              "Net139",
              "Net140",
              "Net141",
              "Net142",
              "Net143",
              "Net144",
              "Net145",
              "Net146",
              "Net147",
              "Net148",
              "Net149",
              "Net150",
              "Net151",
              "Net152",
              "Net153",
              "Net154",
              "Net155",
              "Net156",
              "Net157",
              "Net158",
              "Net159",
              "Net160",
              "Net161",
              "Net162",
              "Net163",
              "Net164",
              "Net165",
              "Net166",
              "Net167",
              "Net168",
              "Net169",
              "Net170",
              "Net171",
              "Net172",
              "Net173",
              "Net174",
              "Net175",
              "Net176",
              "Net177",
              "Net178",
              "Net179",
              "Net180",
              "Net181",
              "Net182",
              "Net183",
              "Net184",
              "Net185",
              "Net186",
              "Net187",
              "Net188",
              "Net189",
              "Net190",
              "Net191",
              "Net192",
              "Net193",
              "Net194",
              "Net195",
              "Net196",
              "Net197",
              "Net198",
              "Net199",
              "Net200",
              "Net201",
              "Net202",
              "Net203",
              "Net204",
              "Net205",
              "Net206",
              "Net207",
              "Net208",
              "Net209",
              "Net210",
              "Net211",
              "Net212",
              "Net213",
              "Net214",
              "Net215",
              "Net216",
              "Net217",
              "Net218",
              "Net219",
              "Net220",
              "Net221",
              "Net222",
              "Net223",
              "Net224",
              "Net225",
              "Net226",
              "Net227",
              "Net228",
              "Net229",
              "Net230",
              "Net231",
              "Net232",
              "Net233",
              "Net234",
              "Net235",
              "Net236",
              "Net237",
              "Net238",
              "Net239",
              "Net240",
              "Net241",
              "Net242",
              "Net243",
              "Net244",
              "Net245",
              "Net246",
              "Net247",
              "Net248",
              "Net249",
              "Net250",
              "Net251",
              "Net252",
              "Net253",
              "Net254",
              "Net255",
              "Net256",
              "Net257",
              "Net258",
              "Net259",
              "Net260",
              "Net261",
              "Net262",
              "Net263",
              "Net264",
              "Net265",
              "Net266",
              "Net267",
              "Net268",
              "Net269",
              "Net270",
              "Net271",
              "Net272",
              "Net273",
              "Net274",
              "Net275",
              "Net276",
              "Net277",
              "Net278",
              "Net279",
              "Net280",
              "Net281",
              "Net282",
              "Net283",
              "Net284",
              "Net285",
              "Net286",
              "Net287",
              "Net288",
              "Net289",
              "Net290",
              "Net291",
              "Net292",
              "Net293",
              "Net294",
              "Net295",
              "Net296",
              "Net297",
              "Net298",
              "Net299",
              "Net300",
              "Net301",
              "Net302",
              "Net303",
              "Net304",
              "Net305",
              "Net306",
              "Net307",
              "Net308",
              "Net309",
              "Net310",
              "Net311",
              "Net312",
              "Net313",
              "Net314",
              "Net315",
              "Net316",
              "Net317",
              "Net318",
              "Net319",
              "Net320",
              "Net321",
              "Net322",
              "Net323",
              "Net324",
              "Net325",
              "Net326",
              "Net327",
              "Net328",
              "Net329",
              "Net330",
              "Net331",
              "Net332",
              "Net333",
              "Net334",
              "Net335",
              "Net336",
              "Net337",
              "Net338",
              "Net339",
              "Net340",
              "Net341",
              "Net342",
              "Net343",
              "Net344",
              "Net345",
              "Net346",
              "Net347",
              "Net348",
              "Net349",
              "Net350",
              "Net351",
              "Net352",
              "Net353",
              "Net354",
              "Net355",
              "Net356",
              "Net357",
              "Net358",
              "Net359",
              "Net360",
              "Net361",
              "Net362",
              "Net363",
              "Net364",
              "Net365",
              "Prepaid"
            ],
            "type": "string",
            "description": "The invoice payment terms"
          },
          "service": {
            "$ref": "#/components/schemas/invoiceServiceRequest"
          },
          "charges": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/invoiceChargeRequest"
            },
            "description": "The list of charges"
          },
          "customer": {
            "$ref": "#/components/schemas/invoiceCustomerRequest"
          },
          "referenceNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/invoiceReferenceNumberRequest"
            },
            "description": "An optional list of reference numbers"
          },
          "externalId": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The external id of the invoice. If not provided will default to the invoice number provided",
            "default": "InvoiceNumber",
            "nullable": true
          }
        },
        "example": {
          "Type": "Invoice",
          "InvoiceNumber": "INV#123456-789",
          "InvoiceDate": "2024-09-12T00:00:00",
          "ShipDate": "2024-09-08T00:00:00",
          "DeliveryDate": "2024-09-09T00:00:00",
          "Stops": [
            {
              "Type": "Origin",
              "Sequence": 1,
              "Address": {
                "Name": "This is where the freight is picked up from",
                "Address1": "123 Origin St",
                "Address2": "Apartment 100",
                "City": "Anytown",
                "State": "NY",
                "Country": "USA",
                "PostalCode": "12345"
              }
            },
            {
              "Type": "Destination",
              "Sequence": 2,
              "Address": {
                "Name": "This is where the freight is delivered to",
                "Address1": "456 Destination St",
                "Address2": null,
                "City": "Anytown",
                "State": "NY",
                "Country": "USA",
                "PostalCode": "12345"
              }
            },
            {
              "Type": "BillTo",
              "Sequence": 3,
              "Address": {
                "Name": "Shipper c/o 3PL LLC",
                "Address1": "Send money here Ave",
                "Address2": "Suite 123",
                "City": "Brooklyn",
                "State": "NY",
                "Country": "USA",
                "PostalCode": "11210"
              }
            },
            {
              "Type": "RemitTo",
              "Sequence": 4,
              "Address": {
                "Name": "Factoring Company x",
                "Address1": "123 Factor St",
                "Address2": null,
                "City": "Anytown",
                "State": "NY",
                "Country": "USA",
                "PostalCode": "12345"
              }
            }
          ],
          "Items": [
            {
              "Id": "1",
              "Description": "Widget",
              "Class": 55,
              "NMFCCode": "123456",
              "HandlingUnit": "Pallet",
              "HandlingUnitCount": 1,
              "TotalCount": 1,
              "Dimensions": {
                "System": "Imperial",
                "Weight": 10000,
                "Volume": null,
                "Height": 60,
                "Length": 48,
                "Width": 40,
                "Stackable": false
              }
            }
          ],
          "Vendor": {
            "ExternalId": "ATRUCK101",
            "ScacCode": "ABCD",
            "DotNumber": "97865",
            "McNumber": "123456"
          },
          "Currency": "USD",
          "ChargeTerms": "Collect",
          "PaymentTerms": "Net10",
          "Service": {
            "Mode": "Ground",
            "Type": "TL",
            "Level": "Standard",
            "Equipment": "Flatbed"
          },
          "Charges": [
            {
              "Charge": 500,
              "ItemId": "1",
              "Code": {
                "Type": "Vendor",
                "Description": "Base Rate",
                "Value": "400"
              }
            },
            {
              "Charge": 45,
              "ItemId": "1",
              "Code": {
                "Type": "Vendor",
                "Description": "Liftgate",
                "Value": "LFG"
              }
            }
          ],
          "Customer": {
            "ExternalId": "CUST123"
          },
          "ReferenceNumbers": [
            {
              "Type": "OrderNumber",
              "Description": "OrderNumber",
              "Value": "123456-789"
            },
            {
              "Type": "ShipmentNumber",
              "Description": "ShipmentNumber",
              "Value": "SHIP-123456-789"
            }
          ],
          "ExternalId": "INV#123456-789"
        }
      },
      "invoiceServiceRequest": {
        "type": "object",
        "properties": {
          "mode": {
            "enum": [
              "Ground",
              "Air",
              "NonFreight",
              "Ocean",
              "Rail"
            ],
            "type": "string",
            "description": "The transportation mode",
            "nullable": true
          },
          "type": {
            "enum": [
              "LTL",
              "TL",
              "Parcel",
              "Expedited",
              "Air",
              "Cartage",
              "Drayage",
              "Guaranteed",
              "Intermodal",
              "Warehouse",
              "FourPL",
              "Ocean",
              "Rail",
              "Service",
              "Shuttle"
            ],
            "type": "string",
            "description": "The transportation service type",
            "nullable": true
          },
          "level": {
            "enum": [
              "NextDayAM",
              "NextDayPM",
              "SecondDay",
              "Deferred",
              "ThreeFiveDay",
              "International",
              "NextDay",
              "Volume",
              "Conestoga",
              "Consolidation",
              "Flatbed",
              "TemperatureControlled",
              "FourPL",
              "Standard",
              "Priority",
              "Economy",
              "Guaranteed",
              "GuaranteedExclusive",
              "TCSW",
              "TCSP",
              "PowerOnly",
              "DropTrailer",
              "DumpTrailer",
              "Guaranteed5PM",
              "Guaranteed12PM",
              "Guaranteed330PM",
              "PilotCar",
              "Installation",
              "Guaranteed8AM",
              "Guaranteed10AM",
              "Guaranteed4PM",
              "Guaranteed9AM",
              "Guaranteed11AM",
              "Guaranteed1PM",
              "Guaranteed2PM",
              "Guaranteed3PM"
            ],
            "type": "string",
            "description": "The transportation service level",
            "nullable": true
          },
          "equipment": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The equipment used",
            "nullable": true
          }
        },
        "description": "The invoice service information"
      },
      "invoiceStopRequest": {
        "required": [
          "type",
          "sequence"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "Origin",
              "Destination",
              "BillTo",
              "RemitTo"
            ],
            "type": "string",
            "description": "The type of Stop"
          },
          "sequence": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "The Stop sequence",
            "format": "int32"
          },
          "address": {
            "$ref": "#/components/schemas/invoiceAddressRequest"
          }
        }
      },
      "invoiceUuidResponse": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "invoiceVendorRequest": {
        "required": [
          "externalId"
        ],
        "type": "object",
        "properties": {
          "externalId": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The Tenant's unique identifier for the Vendor. This value should match the value used when creating Orders programmatically."
          },
          "scacCode": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "The Standard Carrier Alpha Code for the Vendor."
          },
          "dotNumber": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "The DOT Number for the Vendor."
          },
          "mcNumber": {
            "maxLength": 8,
            "minLength": 0,
            "type": "string",
            "description": "The MC Number for the Vendor."
          }
        },
        "description": "The Tenant's unique identifier for the Vendor. This value should match the value used when creating Orders programatically."
      },
      "list_string": {
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "orderAcceptedResponse": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "The external identifier for the Order"
          }
        }
      },
      "orderAddressRequest": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The name of the address",
            "nullable": true
          },
          "address1": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The street address",
            "nullable": true
          },
          "address2": {
            "maxLength": 250,
            "minLength": 0,
            "type": "string",
            "description": "The street address (continued)",
            "nullable": true
          },
          "city": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The city",
            "nullable": true
          },
          "state": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The two or three character ISO 3166-2 code for the state or province",
            "nullable": true
          },
          "country": {
            "enum": [
              "USA",
              "CAN",
              "MEX"
            ],
            "type": "string",
            "description": "The three character ISO 3166-1 alpha 3 code for the country. Defaults to 'USA' when empty.",
            "nullable": true
          },
          "postalCode": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "The five digit or six character postal code",
            "nullable": true
          }
        },
        "description": "The physical address of the Stop",
        "nullable": true
      },
      "orderChargeCodeRequest": {
        "required": [
          "description",
          "value"
        ],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The Code description"
          },
          "value": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "description": "The Code value"
          }
        },
        "description": "The charge code"
      },
      "orderChargeRequest": {
        "required": [
          "charge",
          "code"
        ],
        "type": "object",
        "properties": {
          "charge": {
            "type": "number",
            "description": "The charge amount",
            "format": "double"
          },
          "itemId": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The unique identifier of an associated Item, if applicable",
            "nullable": true
          },
          "code": {
            "$ref": "#/components/schemas/orderChargeCodeRequest"
          }
        }
      },
      "orderContactRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the contact",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "description": "The phone of the contact",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "The email of the contact",
            "format": "email",
            "nullable": true
          },
          "department": {
            "type": "string",
            "description": "The department of the contact",
            "nullable": true
          }
        },
        "description": "The contact information of the Vendor",
        "nullable": true
      },
      "orderCustomerRequest": {
        "required": [
          "externalId",
          "name",
          "billingTerms"
        ],
        "type": "object",
        "properties": {
          "externalId": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The Tenant's unique identifier for the Customer"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The Name of the Customer"
          },
          "billingTerms": {
            "minLength": 1,
            "enum": [
              "Net0",
              "Net1",
              "Net2",
              "Net3",
              "Net4",
              "Net5",
              "Net6",
              "Net7",
              "Net8",
              "Net9",
              "Net10",
              "Net11",
              "Net12",
              "Net13",
              "Net14",
              "Net15",
              "Net16",
              "Net17",
              "Net18",
              "Net19",
              "Net20",
              "Net21",
              "Net22",
              "Net23",
              "Net24",
              "Net25",
              "Net26",
              "Net27",
              "Net28",
              "Net29",
              "Net30",
              "Net31",
              "Net32",
              "Net33",
              "Net34",
              "Net35",
              "Net36",
              "Net37",
              "Net38",
              "Net39",
              "Net40",
              "Net41",
              "Net42",
              "Net43",
              "Net44",
              "Net45",
              "Net46",
              "Net47",
              "Net48",
              "Net49",
              "Net50",
              "Net51",
              "Net52",
              "Net53",
              "Net54",
              "Net55",
              "Net56",
              "Net57",
              "Net58",
              "Net59",
              "Net60",
              "Net61",
              "Net62",
              "Net63",
              "Net64",
              "Net65",
              "Net66",
              "Net67",
              "Net68",
              "Net69",
              "Net70",
              "Net71",
              "Net72",
              "Net73",
              "Net74",
              "Net75",
              "Net76",
              "Net77",
              "Net78",
              "Net79",
              "Net80",
              "Net81",
              "Net82",
              "Net83",
              "Net84",
              "Net85",
              "Net86",
              "Net87",
              "Net88",
              "Net89",
              "Net90",
              "Net91",
              "Net92",
              "Net93",
              "Net94",
              "Net95",
              "Net96",
              "Net97",
              "Net98",
              "Net99",
              "Net100",
              "Net101",
              "Net102",
              "Net103",
              "Net104",
              "Net105",
              "Net106",
              "Net107",
              "Net108",
              "Net109",
              "Net110",
              "Net111",
              "Net112",
              "Net113",
              "Net114",
              "Net115",
              "Net116",
              "Net117",
              "Net118",
              "Net119",
              "Net120",
              "Net121",
              "Net122",
              "Net123",
              "Net124",
              "Net125",
              "Net126",
              "Net127",
              "Net128",
              "Net129",
              "Net130",
              "Net131",
              "Net132",
              "Net133",
              "Net134",
              "Net135",
              "Net136",
              "Net137",
              "Net138",
              "Net139",
              "Net140",
              "Net141",
              "Net142",
              "Net143",
              "Net144",
              "Net145",
              "Net146",
              "Net147",
              "Net148",
              "Net149",
              "Net150",
              "Net151",
              "Net152",
              "Net153",
              "Net154",
              "Net155",
              "Net156",
              "Net157",
              "Net158",
              "Net159",
              "Net160",
              "Net161",
              "Net162",
              "Net163",
              "Net164",
              "Net165",
              "Net166",
              "Net167",
              "Net168",
              "Net169",
              "Net170",
              "Net171",
              "Net172",
              "Net173",
              "Net174",
              "Net175",
              "Net176",
              "Net177",
              "Net178",
              "Net179",
              "Net180",
              "Net181",
              "Net182",
              "Net183",
              "Net184",
              "Net185",
              "Net186",
              "Net187",
              "Net188",
              "Net189",
              "Net190",
              "Net191",
              "Net192",
              "Net193",
              "Net194",
              "Net195",
              "Net196",
              "Net197",
              "Net198",
              "Net199",
              "Net200",
              "Net201",
              "Net202",
              "Net203",
              "Net204",
              "Net205",
              "Net206",
              "Net207",
              "Net208",
              "Net209",
              "Net210",
              "Net211",
              "Net212",
              "Net213",
              "Net214",
              "Net215",
              "Net216",
              "Net217",
              "Net218",
              "Net219",
              "Net220",
              "Net221",
              "Net222",
              "Net223",
              "Net224",
              "Net225",
              "Net226",
              "Net227",
              "Net228",
              "Net229",
              "Net230",
              "Net231",
              "Net232",
              "Net233",
              "Net234",
              "Net235",
              "Net236",
              "Net237",
              "Net238",
              "Net239",
              "Net240",
              "Net241",
              "Net242",
              "Net243",
              "Net244",
              "Net245",
              "Net246",
              "Net247",
              "Net248",
              "Net249",
              "Net250",
              "Net251",
              "Net252",
              "Net253",
              "Net254",
              "Net255",
              "Net256",
              "Net257",
              "Net258",
              "Net259",
              "Net260",
              "Net261",
              "Net262",
              "Net263",
              "Net264",
              "Net265",
              "Net266",
              "Net267",
              "Net268",
              "Net269",
              "Net270",
              "Net271",
              "Net272",
              "Net273",
              "Net274",
              "Net275",
              "Net276",
              "Net277",
              "Net278",
              "Net279",
              "Net280",
              "Net281",
              "Net282",
              "Net283",
              "Net284",
              "Net285",
              "Net286",
              "Net287",
              "Net288",
              "Net289",
              "Net290",
              "Net291",
              "Net292",
              "Net293",
              "Net294",
              "Net295",
              "Net296",
              "Net297",
              "Net298",
              "Net299",
              "Net300",
              "Net301",
              "Net302",
              "Net303",
              "Net304",
              "Net305",
              "Net306",
              "Net307",
              "Net308",
              "Net309",
              "Net310",
              "Net311",
              "Net312",
              "Net313",
              "Net314",
              "Net315",
              "Net316",
              "Net317",
              "Net318",
              "Net319",
              "Net320",
              "Net321",
              "Net322",
              "Net323",
              "Net324",
              "Net325",
              "Net326",
              "Net327",
              "Net328",
              "Net329",
              "Net330",
              "Net331",
              "Net332",
              "Net333",
              "Net334",
              "Net335",
              "Net336",
              "Net337",
              "Net338",
              "Net339",
              "Net340",
              "Net341",
              "Net342",
              "Net343",
              "Net344",
              "Net345",
              "Net346",
              "Net347",
              "Net348",
              "Net349",
              "Net350",
              "Net351",
              "Net352",
              "Net353",
              "Net354",
              "Net355",
              "Net356",
              "Net357",
              "Net358",
              "Net359",
              "Net360",
              "Net361",
              "Net362",
              "Net363",
              "Net364",
              "Net365",
              "Prepaid"
            ],
            "type": "string",
            "description": "The billing terms for the Customer"
          },
          "currency": {
            "enum": [
              "USD",
              "CAD"
            ],
            "type": "string",
            "description": "The three character ISO 4217 code for the Customer Currency. Defaults to 'USD' when empty.",
            "nullable": true
          },
          "contact": {
            "$ref": "#/components/schemas/orderContactRequest"
          },
          "charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/orderChargeRequest"
            },
            "description": "The list of Charge Codes",
            "nullable": true
          }
        },
        "description": "The Order Customer"
      },
      "orderItemDimensionRequest": {
        "type": "object",
        "properties": {
          "system": {
            "enum": [
              "Imperial",
              "Metric"
            ],
            "type": "string",
            "description": "The system of measurement. If the system is Imperial, all dimensions are in inches and pounds.  If the system is Metric, all dimensions are in centimeters and kilograms. Defaults to 'Imperial' when empty.",
            "nullable": true
          },
          "weight": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "number",
            "description": "Weight",
            "format": "double",
            "nullable": true
          },
          "height": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "number",
            "description": "Height",
            "format": "double",
            "nullable": true
          },
          "length": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "number",
            "description": "Length",
            "format": "double",
            "nullable": true
          },
          "width": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "number",
            "description": "Width",
            "format": "double",
            "nullable": true
          },
          "stackable": {
            "type": "boolean",
            "description": "Indicates whether the Item is stackable",
            "nullable": true
          }
        },
        "description": "The physical dimensions of the Item",
        "nullable": true
      },
      "orderItemRequest": {
        "required": [
          "id",
          "handlingUnit",
          "handlingUnitCount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The unique identifier for the Item"
          },
          "class": {
            "maximum": 500,
            "minimum": 0,
            "type": "number",
            "description": "The Item freight class",
            "format": "double",
            "nullable": true
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The Item description",
            "nullable": true
          },
          "handlingUnit": {
            "minLength": 1,
            "enum": [
              "Pallet",
              "Drum",
              "Bag",
              "Barrels",
              "Crates",
              "Bundles",
              "Piece",
              "Loose",
              "Boxes",
              "Cases",
              "Carton",
              "Totes",
              "Cans",
              "Cylinders",
              "FlatRacks",
              "Kegs",
              "Pails",
              "Reels",
              "Rolls",
              "Tanks",
              "Tubes"
            ],
            "type": "string",
            "description": "The Item handling unit"
          },
          "handlingUnitCount": {
            "minimum": 0,
            "type": "number",
            "description": "The quantity, in handling units",
            "format": "double"
          },
          "nmfcCode": {
            "maxLength": 15,
            "minLength": 0,
            "type": "string",
            "description": "The Item NMFC code",
            "nullable": true
          },
          "totalCount": {
            "minimum": 0,
            "type": "number",
            "description": "The total quantity",
            "format": "double",
            "nullable": true
          },
          "dimensions": {
            "$ref": "#/components/schemas/orderItemDimensionRequest"
          }
        }
      },
      "orderReferenceNumberRequest": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "type": {
            "enum": [
              "GeneralReferenceNumber",
              "BOLNumber",
              "PONumber",
              "SONumber",
              "ShipmentNumber"
            ],
            "type": "string",
            "description": "The Reference Number type. Defaults to 'GeneralReferenceNumber' when empty.",
            "nullable": true
          },
          "value": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The value"
          },
          "description": {
            "type": "string",
            "description": "The description",
            "nullable": true
          }
        }
      },
      "orderRequest": {
        "required": [
          "orderNumber",
          "shipDate",
          "vendors",
          "customer"
        ],
        "type": "object",
        "properties": {
          "orderNumber": {
            "maxLength": 128,
            "minLength": 0,
            "type": "string",
            "description": "The unique identifier for the Order"
          },
          "externalId": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "The external id of the order. If not provided will default to the order number provided",
            "default": "OrderNumber"
          },
          "shipDate": {
            "minLength": 1,
            "type": "string",
            "description": "The date on which the freight was shipped. Date Only",
            "format": "date-time"
          },
          "deliveryDate": {
            "type": "string",
            "description": "The date on which the freight was delivered. Date Only",
            "format": "date-time",
            "nullable": true
          },
          "stops": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/orderStopRequest"
            },
            "description": "The list of Stops",
            "nullable": true
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/orderItemRequest"
            },
            "description": "The list of Items",
            "nullable": true
          },
          "vendors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/orderVendorRequest"
            },
            "description": "The list of Vendors. At least one is required. If multiple are provided, each externalId must appear only once."
          },
          "customer": {
            "$ref": "#/components/schemas/orderCustomerRequest"
          },
          "referenceNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/orderReferenceNumberRequest"
            },
            "description": "An optional list of Reference Numbers",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/dictionary_string"
            },
            "description": "Optional Order metadata, expressed as a key-value pair of key-value pairs. Note that this does *not* accept arbitrary JSON data, and does not support arrays. Top-level keys cannot have literal values, their children must be objects. For instance, the following is valid:\n```\n\"metadata\": {\n  \"parentKey1\": {\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n  },\n  \"parentKey2\": {\n    \"keyA\": \"valueA\",\n    \"keyB\": \"valueB\",\n  }\n}\n```\n\nYou can use any valid JSON name for the key names on both parent and child objects, except for the `navix_` prefix, which is reserved.",
            "nullable": true
          },
          "tags": {
            "$ref": "#/components/schemas/orderTagsRequest"
          }
        },
        "example": {
          "OrderNumber": "123456-789",
          "ExternalId": "123456-789",
          "ShipDate": "2025-09-08T15:09:43.3248421Z",
          "DeliveryDate": "2025-09-09T15:09:43.3248747Z",
          "Stops": [
            {
              "Type": "Origin",
              "Sequence": 1,
              "Vendors": [
                "ATRUCK101"
              ],
              "Address": {
                "Name": "This is where the freight is picked up from",
                "Address1": "123 Origin St",
                "Address2": "Apartment 100",
                "City": "Anytown",
                "State": "NY",
                "Country": "USA",
                "PostalCode": "12345"
              }
            },
            {
              "Type": "Destination",
              "Sequence": 2,
              "Vendors": [
                "ATRUCK101"
              ],
              "Address": {
                "Name": "This is where the freight is delivered to",
                "Address1": "456 Destination St",
                "Address2": null,
                "City": "Anytown",
                "State": "NY",
                "Country": "USA",
                "PostalCode": "12345"
              }
            },
            {
              "Type": "Origin",
              "Sequence": 3,
              "Vendors": [
                "BTRUCK102"
              ],
              "Address": {
                "Name": "Second segment/movement/leg where freight is picked up from by new carrier",
                "Address1": "456 Destination St",
                "Address2": null,
                "City": "Anytown",
                "State": "NY",
                "Country": "USA",
                "PostalCode": "12345"
              }
            },
            {
              "Type": "Destination",
              "Sequence": 4,
              "Vendors": [
                "BTRUCK102"
              ],
              "Address": {
                "Name": "Second segment/movement/leg where freight is delivered to by new carrier",
                "Address1": "Final Destination Lane",
                "Address2": "Apartment 301",
                "City": "Mytown",
                "State": "PA",
                "Country": "USA",
                "PostalCode": "19876"
              }
            }
          ],
          "Items": [
            {
              "Id": "1",
              "Class": 55,
              "Description": "Widget",
              "HandlingUnit": "Pallet",
              "HandlingUnitCount": 1,
              "NMFCCode": "123456",
              "TotalCount": 1,
              "Dimensions": {
                "System": "Imperial",
                "Weight": null,
                "Height": 60,
                "Length": 48,
                "Width": 40,
                "Stackable": false
              }
            }
          ],
          "Vendors": [
            {
              "ExternalId": "ATRUCK101",
              "Name": "A Plus Trucking",
              "ScacCode": "ABCD",
              "McNumber": "123456",
              "DotNumber": "97865",
              "Type": "Carrier",
              "Currency": "USD",
              "ChargeTerms": "Collect",
              "PaymentTerms": "Net10",
              "BillToAddress": {
                "Name": null,
                "Address1": "123 Truck St",
                "Address2": null,
                "City": "Anytown",
                "State": "NY",
                "Country": "USA",
                "PostalCode": "12345"
              },
              "RemitToAddress": {
                "Name": null,
                "Address1": "Factoring Company x",
                "Address2": null,
                "City": "Anytown",
                "State": "NY",
                "Country": "USA",
                "PostalCode": "12345"
              },
              "Address": {
                "Name": null,
                "Address1": "123 Truck St",
                "Address2": null,
                "City": "Anytown",
                "State": "NY",
                "Country": "USA",
                "PostalCode": "12345"
              },
              "Contact": {
                "Name": "Joe Smith",
                "Phone": "123-456-7890",
                "Email": "aplustrucking@example.navix.io",
                "Department": "Customer Service"
              },
              "Service": {
                "Mode": "Ground",
                "Type": "LTL",
                "Level": "Standard",
                "Equipment": "Flatbed"
              },
              "Charges": [
                {
                  "Charge": 500,
                  "ItemId": null,
                  "Code": {
                    "Description": "Base Rate",
                    "Value": "PWT"
                  }
                }
              ]
            },
            {
              "ExternalId": "BTRUCK102",
              "Name": "B Trucking Inc",
              "ScacCode": "EFGH",
              "McNumber": "567890",
              "DotNumber": "45678",
              "Type": "Carrier",
              "Currency": "USD",
              "ChargeTerms": "Collect",
              "PaymentTerms": "Net15",
              "BillToAddress": {
                "Name": null,
                "Address1": "345 Truck St",
                "Address2": null,
                "City": "Anytown",
                "State": "NY",
                "Country": "USA",
                "PostalCode": "12345"
              },
              "RemitToAddress": null,
              "Address": {
                "Name": null,
                "Address1": "345 Truck St",
                "Address2": null,
                "City": "Anytown",
                "State": "NY",
                "Country": "USA",
                "PostalCode": "12345"
              },
              "Contact": {
                "Name": "Kurt Vite",
                "Phone": "444-222-9384",
                "Email": "btruckinc@example.navix.io",
                "Department": "Customer Service"
              },
              "Service": {
                "Mode": "Ground",
                "Type": "LTL",
                "Level": "Standard",
                "Equipment": "Flatbed"
              },
              "Charges": [
                {
                  "Charge": 300,
                  "ItemId": null,
                  "Code": {
                    "Description": "Base Rate",
                    "Value": "BLC"
                  }
                }
              ]
            }
          ],
          "Customer": {
            "ExternalId": "CUST123",
            "Name": "Acme Corp",
            "BillingTerms": "Net20",
            "Currency": "USD",
            "Contact": {
              "Name": "John Smith",
              "Phone": "123-456-7890",
              "Email": "acmecorp@example.navix.io",
              "Department": "Accounts Payable"
            },
            "Charges": [
              {
                "Charge": 280,
                "ItemId": "361",
                "Code": {
                  "Description": "Base Rate",
                  "Value": "Base"
                }
              }
            ]
          },
          "ReferenceNumbers": [
            {
              "Type": "ShipmentNumber",
              "Value": "SHIP-123456-789",
              "Description": "Shipment"
            }
          ],
          "Metadata": {
            "AnyValue": {
              "ForInstanceATrackingNumber": "123-789",
              "OrAnything": "2025-09-09"
            },
            "SomeOtherValue": {
              "sample1": "value1"
            }
          },
          "Tags": {
            "Division": "Eastern"
          }
        }
      },
      "orderServiceRequest": {
        "type": "object",
        "properties": {
          "mode": {
            "enum": [
              "Ground",
              "Air",
              "NonFreight",
              "Ocean",
              "Rail"
            ],
            "type": "string",
            "description": "The transportation mode",
            "nullable": true
          },
          "type": {
            "enum": [
              "LTL",
              "TL",
              "Parcel",
              "Expedited",
              "Air",
              "Cartage",
              "Drayage",
              "Guaranteed",
              "Intermodal",
              "Warehouse",
              "FourPL",
              "Ocean",
              "Rail",
              "Service",
              "Shuttle"
            ],
            "type": "string",
            "description": "The transportation service type",
            "nullable": true
          },
          "level": {
            "enum": [
              "NextDayAM",
              "NextDayPM",
              "SecondDay",
              "Deferred",
              "ThreeFiveDay",
              "International",
              "NextDay",
              "Volume",
              "Conestoga",
              "Consolidation",
              "Flatbed",
              "TemperatureControlled",
              "FourPL",
              "Standard",
              "Priority",
              "Economy",
              "Guaranteed",
              "GuaranteedExclusive",
              "TCSW",
              "TCSP",
              "PowerOnly",
              "DropTrailer",
              "DumpTrailer",
              "Guaranteed5PM",
              "Guaranteed12PM",
              "Guaranteed330PM",
              "PilotCar",
              "Installation",
              "Guaranteed8AM",
              "Guaranteed10AM",
              "Guaranteed4PM",
              "Guaranteed9AM",
              "Guaranteed11AM",
              "Guaranteed1PM",
              "Guaranteed2PM",
              "Guaranteed3PM"
            ],
            "type": "string",
            "description": "The transportation service level",
            "nullable": true
          },
          "equipment": {
            "enum": [
              "AgHopper",
              "AutoTransport",
              "AutomotiveRacks",
              "BarrackBarge",
              "Bobtail",
              "Boxcars",
              "BulkCarriers",
              "BulkCommodity",
              "CarFloatBarge",
              "CargoShip",
              "CargoVan",
              "Centerbeams",
              "Chassis",
              "ChemicalTanker",
              "CoilCars",
              "Conestoga",
              "ContainerBulk",
              "ContainerHc",
              "ContainerPalletWide",
              "ContainerPowerPack",
              "ContainerRefrigerated",
              "ContainerStandard",
              "ContainerTanker",
              "ContainerTemperatureControlled",
              "ContainerUpgraded",
              "CoveredHoppers",
              "Crane",
              "CurtainSideVan",
              "DeckBarge",
              "DoubleDropLowBoy",
              "Driveaway",
              "DumpEnd",
              "DumpSide",
              "ElectricHeat",
              "Enclosed",
              "Flatbed",
              "Flatbed4Tarp",
              "Flatbed6Tarp",
              "Flatbed8Tarp",
              "FlatbedAuto",
              "FlatbedCoveredWagon",
              "FlatbedCurtainSide",
              "FlatbedExtendableStretch",
              "FlatbedLegal",
              "FlatbedStandard",
              "FlatbedStretchExtendable",
              "FoodTrailerFrozen",
              "Gondolas",
              "HighCubeDryVan",
              "HighCubeContainer",
              "Hopper",
              "HopperBarge",
              "HotOilTruck",
              "Hotshot",
              "HotshotFlatbed",
              "HydroExcavationTruck",
              "InsulatedVanOrReefer",
              "Isotank",
              "LandollTowTruck",
              "LiquidCargoBarge",
              "Logging",
              "MiniFloat",
              "Moffett",
              "OpenTopHoppers",
              "Other",
              "Pneumatic",
              "PowerBarge",
              "PowerUnitTractor",
              "PumpTruck",
              "Reefer",
              "ReeferHighCube",
              "ReeferStandard",
              "ReeferUpgraded",
              "ReeferOrVentedVan",
              "Refrigerated",
              "RefrigeratedBoxcar",
              "RefrigeratedShips",
              "RemovableGooseNeck",
              "RollOnRollOffShips",
              "RoyalBarge",
              "SingleAxle",
              "SpecializedRailEquipment",
              "SplitHopperBarge",
              "SprinterVan",
              "StepDeck",
              "StraightTruck",
              "SuperBFlatbed",
              "TankBarge",
              "TankerChemical",
              "TankerFood",
              "TankerFuel",
              "Tow",
              "TowHeavyDuty",
              "TowLandoll",
              "TowLightDuty",
              "TowMediumDuty",
              "TriAxle",
              "TruckVan",
              "Van",
              "VanCurtainSide",
              "VanDry",
              "VanSprinter",
              "VanTriAxleDry",
              "VanVented",
              "WalkingFloor",
              "WinchTruck"
            ],
            "type": "string",
            "description": "The physical equipment used",
            "nullable": true
          }
        },
        "description": "The Service information",
        "nullable": true
      },
      "orderStopRequest": {
        "required": [
          "type",
          "sequence"
        ],
        "type": "object",
        "properties": {
          "type": {
            "minLength": 1,
            "enum": [
              "Origin",
              "Destination"
            ],
            "type": "string",
            "description": "The type of Stop"
          },
          "sequence": {
            "maximum": 2147483647,
            "minimum": 0,
            "type": "integer",
            "description": "The Stop sequence",
            "format": "int32"
          },
          "vendors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "If you are not handling customer charges in Navix, and sending in a multimodal Navix Order with multi-segments/movements/legs, you can associate a vendor to the specific stop. Please view payload example of what we recommend.",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/orderAddressRequest"
          }
        }
      },
      "orderTagsRequest": {
        "type": "object",
        "properties": {
          "division": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "The division tag for the order."
          }
        },
        "description": "The Order Tags",
        "nullable": true
      },
      "orderVendorRequest": {
        "required": [
          "externalId",
          "name",
          "charges"
        ],
        "type": "object",
        "properties": {
          "externalId": {
            "maxLength": 128,
            "minLength": 1,
            "type": "string",
            "description": "The Tenant's unique identifier for the Vendor"
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The Name of the Vendor"
          },
          "scacCode": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "The Standard Carrier Alpha Code for the Vendor",
            "nullable": true
          },
          "mcNumber": {
            "maxLength": 64,
            "minLength": 0,
            "type": "string",
            "description": "The MC Number for the Vendor",
            "nullable": true
          },
          "dotNumber": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "The DOT Number for the Vendor",
            "nullable": true
          },
          "type": {
            "enum": [
              "Carrier",
              "Warehouse",
              "Other"
            ],
            "type": "string",
            "description": "The Type of the Vendor",
            "nullable": true
          },
          "currency": {
            "enum": [
              "USD",
              "CAD"
            ],
            "type": "string",
            "description": "The three character ISO 4217 code for the Vendor Currency. Defaults to 'USD' when empty.",
            "nullable": true
          },
          "chargeTerms": {
            "enum": [
              "Collect",
              "Prepaid",
              "PrepaidAdd",
              "ThirdParty"
            ],
            "type": "string",
            "description": "The freight payment terms. Defaults to 'ThirdParty' when empty.",
            "nullable": true
          },
          "paymentTerms": {
            "enum": [
              "Net0",
              "Net1",
              "Net2",
              "Net3",
              "Net4",
              "Net5",
              "Net6",
              "Net7",
              "Net8",
              "Net9",
              "Net10",
              "Net11",
              "Net12",
              "Net13",
              "Net14",
              "Net15",
              "Net16",
              "Net17",
              "Net18",
              "Net19",
              "Net20",
              "Net21",
              "Net22",
              "Net23",
              "Net24",
              "Net25",
              "Net26",
              "Net27",
              "Net28",
              "Net29",
              "Net30",
              "Net31",
              "Net32",
              "Net33",
              "Net34",
              "Net35",
              "Net36",
              "Net37",
              "Net38",
              "Net39",
              "Net40",
              "Net41",
              "Net42",
              "Net43",
              "Net44",
              "Net45",
              "Net46",
              "Net47",
              "Net48",
              "Net49",
              "Net50",
              "Net51",
              "Net52",
              "Net53",
              "Net54",
              "Net55",
              "Net56",
              "Net57",
              "Net58",
              "Net59",
              "Net60",
              "Net61",
              "Net62",
              "Net63",
              "Net64",
              "Net65",
              "Net66",
              "Net67",
              "Net68",
              "Net69",
              "Net70",
              "Net71",
              "Net72",
              "Net73",
              "Net74",
              "Net75",
              "Net76",
              "Net77",
              "Net78",
              "Net79",
              "Net80",
              "Net81",
              "Net82",
              "Net83",
              "Net84",
              "Net85",
              "Net86",
              "Net87",
              "Net88",
              "Net89",
              "Net90",
              "Net91",
              "Net92",
              "Net93",
              "Net94",
              "Net95",
              "Net96",
              "Net97",
              "Net98",
              "Net99",
              "Net100",
              "Net101",
              "Net102",
              "Net103",
              "Net104",
              "Net105",
              "Net106",
              "Net107",
              "Net108",
              "Net109",
              "Net110",
              "Net111",
              "Net112",
              "Net113",
              "Net114",
              "Net115",
              "Net116",
              "Net117",
              "Net118",
              "Net119",
              "Net120",
              "Net121",
              "Net122",
              "Net123",
              "Net124",
              "Net125",
              "Net126",
              "Net127",
              "Net128",
              "Net129",
              "Net130",
              "Net131",
              "Net132",
              "Net133",
              "Net134",
              "Net135",
              "Net136",
              "Net137",
              "Net138",
              "Net139",
              "Net140",
              "Net141",
              "Net142",
              "Net143",
              "Net144",
              "Net145",
              "Net146",
              "Net147",
              "Net148",
              "Net149",
              "Net150",
              "Net151",
              "Net152",
              "Net153",
              "Net154",
              "Net155",
              "Net156",
              "Net157",
              "Net158",
              "Net159",
              "Net160",
              "Net161",
              "Net162",
              "Net163",
              "Net164",
              "Net165",
              "Net166",
              "Net167",
              "Net168",
              "Net169",
              "Net170",
              "Net171",
              "Net172",
              "Net173",
              "Net174",
              "Net175",
              "Net176",
              "Net177",
              "Net178",
              "Net179",
              "Net180",
              "Net181",
              "Net182",
              "Net183",
              "Net184",
              "Net185",
              "Net186",
              "Net187",
              "Net188",
              "Net189",
              "Net190",
              "Net191",
              "Net192",
              "Net193",
              "Net194",
              "Net195",
              "Net196",
              "Net197",
              "Net198",
              "Net199",
              "Net200",
              "Net201",
              "Net202",
              "Net203",
              "Net204",
              "Net205",
              "Net206",
              "Net207",
              "Net208",
              "Net209",
              "Net210",
              "Net211",
              "Net212",
              "Net213",
              "Net214",
              "Net215",
              "Net216",
              "Net217",
              "Net218",
              "Net219",
              "Net220",
              "Net221",
              "Net222",
              "Net223",
              "Net224",
              "Net225",
              "Net226",
              "Net227",
              "Net228",
              "Net229",
              "Net230",
              "Net231",
              "Net232",
              "Net233",
              "Net234",
              "Net235",
              "Net236",
              "Net237",
              "Net238",
              "Net239",
              "Net240",
              "Net241",
              "Net242",
              "Net243",
              "Net244",
              "Net245",
              "Net246",
              "Net247",
              "Net248",
              "Net249",
              "Net250",
              "Net251",
              "Net252",
              "Net253",
              "Net254",
              "Net255",
              "Net256",
              "Net257",
              "Net258",
              "Net259",
              "Net260",
              "Net261",
              "Net262",
              "Net263",
              "Net264",
              "Net265",
              "Net266",
              "Net267",
              "Net268",
              "Net269",
              "Net270",
              "Net271",
              "Net272",
              "Net273",
              "Net274",
              "Net275",
              "Net276",
              "Net277",
              "Net278",
              "Net279",
              "Net280",
              "Net281",
              "Net282",
              "Net283",
              "Net284",
              "Net285",
              "Net286",
              "Net287",
              "Net288",
              "Net289",
              "Net290",
              "Net291",
              "Net292",
              "Net293",
              "Net294",
              "Net295",
              "Net296",
              "Net297",
              "Net298",
              "Net299",
              "Net300",
              "Net301",
              "Net302",
              "Net303",
              "Net304",
              "Net305",
              "Net306",
              "Net307",
              "Net308",
              "Net309",
              "Net310",
              "Net311",
              "Net312",
              "Net313",
              "Net314",
              "Net315",
              "Net316",
              "Net317",
              "Net318",
              "Net319",
              "Net320",
              "Net321",
              "Net322",
              "Net323",
              "Net324",
              "Net325",
              "Net326",
              "Net327",
              "Net328",
              "Net329",
              "Net330",
              "Net331",
              "Net332",
              "Net333",
              "Net334",
              "Net335",
              "Net336",
              "Net337",
              "Net338",
              "Net339",
              "Net340",
              "Net341",
              "Net342",
              "Net343",
              "Net344",
              "Net345",
              "Net346",
              "Net347",
              "Net348",
              "Net349",
              "Net350",
              "Net351",
              "Net352",
              "Net353",
              "Net354",
              "Net355",
              "Net356",
              "Net357",
              "Net358",
              "Net359",
              "Net360",
              "Net361",
              "Net362",
              "Net363",
              "Net364",
              "Net365",
              "Prepaid"
            ],
            "type": "string",
            "description": "The payment terms for the Vendor",
            "nullable": true
          },
          "billToAddress": {
            "$ref": "#/components/schemas/orderAddressRequest"
          },
          "remitToAddress": {
            "$ref": "#/components/schemas/orderAddressRequest"
          },
          "address": {
            "$ref": "#/components/schemas/orderAddressRequest"
          },
          "contact": {
            "$ref": "#/components/schemas/orderContactRequest"
          },
          "service": {
            "$ref": "#/components/schemas/orderServiceRequest"
          },
          "charges": {
            "minItems": 1,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/orderChargeRequest"
            },
            "description": "The list of Charge Codes"
          }
        }
      },
      "vendorInvoiceAddressPublicDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "address1": {
            "type": "string"
          },
          "address2": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          }
        }
      },
      "vendorInvoiceCustomerPublicDto": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string"
          }
        }
      },
      "vendorInvoiceDocumentUuidsPublicDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "enum": [
              "Unset",
              "Invoice",
              "DeliveryReceipt",
              "ProofOfDelivery",
              "BillOfLading",
              "NoticeOfAssignment",
              "RateConfirmation",
              "WeightAndInspectionCertificate",
              "LetterOfAuthority",
              "LumperReceipt",
              "PackingList",
              "GeneratedInvoice",
              "Email",
              "CommercialInvoice",
              "CertificateOfOrigin",
              "CustomerRateConfirmation",
              "ElectronicInterchangeReceipt",
              "GatePass",
              "InsuranceCertificate",
              "OtherReceipt",
              "W9",
              "DeliveryOrder",
              "WeightScaleTicket",
              "TrailerInterchangeReceipt",
              "PurchaseOrder",
              "EscortTicket",
              "PermitReceipt",
              "ServiceOrder",
              "CertificateOfDestruction",
              "DonationReceipt",
              "SmartAndFinalStamp",
              "InboundTripReport",
              "WeighmasterCertificate",
              "CargoActivitySheet",
              "WeberBOL",
              "TimeCard",
              "TransferSheet",
              "TripManifest",
              "TrailerControlRecord",
              "TargetTripSheet",
              "ExitPass",
              "PortOfArthurBOL",
              "ColdChainCustodyForm",
              "IGFFreightDispatch",
              "EquipmentSubmissionForm",
              "Release",
              "ACIManifest",
              "TrailerPicture",
              "MaterialSafetyDataSheet",
              "ShipTicket",
              "DeliveryTicket",
              "InvoiceCorrected",
              "EIRTicket",
              "PalletReceipt",
              "HistoricalAuditDocuments",
              "DetentionReceipt",
              "Unknown",
              "Manifest",
              "CustomerRateApproval",
              "LoadCoverSheet",
              "SafetyChecklist",
              "WalmartDeliveryConfirmationReport",
              "StatementInvoice"
            ],
            "type": "string",
            "default": "Unset"
          }
        }
      },
      "vendorInvoiceItemDimensionsDto": {
        "type": "object",
        "properties": {
          "system": {
            "type": "string"
          },
          "weight": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "volume": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "height": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "length": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "width": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "stackable": {
            "type": "boolean",
            "nullable": true
          }
        }
      },
      "vendorInvoiceItemPublicDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "description": {
            "type": "string"
          },
          "class": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "nmfcCode": {
            "type": "string"
          },
          "handlingUnit": {
            "type": "string"
          },
          "handlingUnitCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "dimensions": {
            "$ref": "#/components/schemas/vendorInvoiceItemDimensionsDto"
          }
        }
      },
      "vendorInvoicePublicDto": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string"
          },
          "invoiceNumber": {
            "type": "string"
          },
          "invoiceDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "shipDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "deliveryDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/vendorInvoiceStatePublicDto"
          },
          "stops": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/vendorInvoiceStopPublicDto"
            }
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/vendorInvoiceItemPublicDto"
            }
          },
          "vendor": {
            "$ref": "#/components/schemas/vendorInvoiceVendorPublicDto"
          },
          "currency": {
            "type": "string"
          },
          "chargeTerms": {
            "type": "string"
          },
          "service": {
            "$ref": "#/components/schemas/vendorInvoiceServicePublicDto"
          },
          "customer": {
            "$ref": "#/components/schemas/vendorInvoiceCustomerPublicDto"
          },
          "referenceNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/vendorInvoiceReferenceNumberPublicDto"
            }
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/vendorInvoiceDocumentUuidsPublicDto"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "receivedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        }
      },
      "vendorInvoiceReferenceNumberPublicDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "vendorInvoiceServicePublicDto": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "level": {
            "type": "string"
          },
          "equipment": {
            "type": "string"
          }
        }
      },
      "vendorInvoiceStatePublicDto": {
        "type": "object",
        "properties": {
          "finalized": {
            "type": "boolean"
          }
        }
      },
      "vendorInvoiceStopPublicDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "sequence": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "address": {
            "$ref": "#/components/schemas/vendorInvoiceAddressPublicDto"
          }
        }
      },
      "vendorInvoiceVendorPublicDto": {
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string"
          }
        }
      },
      "documentRequest": {
        "required": [
          "files"
        ],
        "type": "object",
        "properties": {
          "externalId": {
            "type": "string",
            "description": "The external system's unique identifier used to correlate this document request"
          },
          "externalOrderId": {
            "type": "string",
            "description": "The unique identifier the tenant has assigned for the Invoice, if any"
          },
          "externalInvoiceId": {
            "type": "string"
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/supportingDocumentRequest"
            },
            "description": "A list of documents in Base64 format"
          }
        }
      },
      "documentResponse": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "orderExternalId": {
            "type": "string"
          },
          "type": {
            "enum": [
              "Unset",
              "Invoice",
              "DeliveryReceipt",
              "ProofOfDelivery",
              "BillOfLading",
              "NoticeOfAssignment",
              "RateConfirmation",
              "WeightAndInspectionCertificate",
              "LetterOfAuthority",
              "LumperReceipt",
              "PackingList",
              "GeneratedInvoice",
              "Email",
              "CommercialInvoice",
              "CertificateOfOrigin",
              "CustomerRateConfirmation",
              "ElectronicInterchangeReceipt",
              "GatePass",
              "InsuranceCertificate",
              "OtherReceipt",
              "W9",
              "DeliveryOrder",
              "WeightScaleTicket",
              "TrailerInterchangeReceipt",
              "PurchaseOrder",
              "EscortTicket",
              "PermitReceipt",
              "ServiceOrder",
              "CertificateOfDestruction",
              "DonationReceipt",
              "SmartAndFinalStamp",
              "InboundTripReport",
              "WeighmasterCertificate",
              "CargoActivitySheet",
              "WeberBOL",
              "TimeCard",
              "TransferSheet",
              "TripManifest",
              "TrailerControlRecord",
              "TargetTripSheet",
              "ExitPass",
              "PortOfArthurBOL",
              "ColdChainCustodyForm",
              "IGFFreightDispatch",
              "EquipmentSubmissionForm",
              "Release",
              "ACIManifest",
              "TrailerPicture",
              "MaterialSafetyDataSheet",
              "ShipTicket",
              "DeliveryTicket",
              "InvoiceCorrected",
              "EIRTicket",
              "PalletReceipt",
              "HistoricalAuditDocuments",
              "DetentionReceipt",
              "Unknown",
              "Manifest",
              "CustomerRateApproval",
              "LoadCoverSheet",
              "SafetyChecklist",
              "WalmartDeliveryConfirmationReport",
              "StatementInvoice"
            ],
            "type": "string",
            "default": "Unset"
          },
          "status": {
            "enum": [
              "Draft",
              "Ready",
              "Approved"
            ],
            "type": "string",
            "default": "Draft"
          },
          "hasSignature": {
            "type": "boolean"
          },
          "approvedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "approvedBy": {
            "type": "string"
          },
          "filename": {
            "type": "string"
          }
        },
        "example": {
          "Uuid": "071441e0-e3d5-48b7-ae2a-f48a630b687e",
          "OrderExternalId": "ORD_123",
          "Type": "BillOfLading",
          "Status": "Approved",
          "HasSignature": true,
          "ApprovedAt": "2025-09-09T15:09:44.503622Z",
          "ApprovedBy": "john.smith@freight.com",
          "Filename": "BOL.pdf"
        }
      },
      "documentsApprovedRequest": {
        "required": [
          "startTime"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "minLength": 1,
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "documentsApprovedResponse": {
        "type": "object",
        "properties": {
          "documentUuid": {
            "type": "string",
            "format": "uuid"
          },
          "orderExternalId": {
            "type": "string"
          }
        }
      },
      "documentUuidResponse": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "orderApprovedRequest": {
        "required": [
          "startTime"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "minLength": 1,
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "orderApprovedResponse": {
        "type": "object",
        "properties": {
          "orderExternalId": {
            "type": "string"
          }
        }
      },
      "supportingDocumentRequest": {
        "required": [
          "fileBase64String",
          "fileName"
        ],
        "type": "object",
        "properties": {
          "fileBase64String": {
            "minLength": 1,
            "type": "string",
            "description": "the Base64 string of the document"
          },
          "fileName": {
            "minLength": 1,
            "type": "string",
            "description": "The complete filename including extension ie; MyDocument.pdf"
          }
        }
      },
      "textLocatePayload": {
        "type": "object",
        "properties": {
          "loadId": {
            "type": "string",
            "description": "The Load"
          },
          "textlocateId": {
            "type": "string",
            "description": "The TextLocate Identifier"
          },
          "images": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of image URLs"
          }
        }
      },
      "textLocateWebhookRequest": {
        "type": "object",
        "properties": {
          "payload": {
            "$ref": "#/components/schemas/textLocatePayload"
          }
        }
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Enter the Bearer Authorization string as following: `Bearer Generated-JWT-Token`",
        "name": "Authorization",
        "in": "header"
      },
      "X-Api-Key": {
        "type": "apiKey",
        "name": "X-Api-Key",
        "in": "header"
      },
      "apiKey": {
        "type": "apiKey",
        "name": "apiKey",
        "in": "header"
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "API v1",
      "tags": [
        "API v1_Orders",
        "API v1_Invoices",
        "API v1_Documents"
      ]
    },
    {
      "name": "API v2",
      "tags": [
        "API v2_Invoices",
        "API v2_Orders",
        "API v2_Disputes",
        "API v2_Webhooks"
      ]
    },
    {
      "name": "Provisional",
      "tags": [
        "Provisional_Orders",
        "Provisional_Documents",
        "Provisional_Rating Engine"
      ]
    }
  ]
}